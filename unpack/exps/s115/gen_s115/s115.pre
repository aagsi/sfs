# 0 "s115.spec"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "s115.spec"


# 1 "../../common/whiterabbit.spec" 1
TIMESTAMP_WHITERABBIT(id)
{
 MEMBER(DATA12 subsystem_id);
 MEMBER(DATA16 t1);
 MEMBER(DATA16 t2);
 MEMBER(DATA16 t3);
 MEMBER(DATA16 t4);

 UINT32 header NOENCODE {
  0_11: id = MATCH(id);
  12_15: 0;
     16: error_bit;
  17_31: 0;
  ENCODE(subsystem_id, (value=id));
 };
 UINT32 d1 NOENCODE {
  0_15: t1;
  16_31: 0x03e1;
  ENCODE(t1, (value=t1));
 };
 UINT32 d2 NOENCODE {
  0_15: t2;
  16_31: 0x04e1;
  ENCODE(t2, (value=t2));
 };
 UINT32 d3 NOENCODE {
  0_15: t3;
  16_31: 0x05e1;
  ENCODE(t3, (value=t3));
 };
 UINT32 d4 NOENCODE {
  0_15: t4;
  16_31: 0x06e1;
  ENCODE(t4, (value=t4));
 };
}

TIMESTAMP_WHITERABBIT_EXTENDED(id)
{
 MEMBER(DATA16 subsystem_id);
 MEMBER(DATA16 t1);
 MEMBER(DATA16 t2);
 MEMBER(DATA16 t3);
 MEMBER(DATA16 t4);

 UINT32 header NOENCODE {
  0_12: id = MATCH(id);
  13_15: 0;
     16: error_bit;
  17_31: 0;
  ENCODE(subsystem_id, (value=id));
 };
 UINT32 d1 NOENCODE {
  0_15: t1;
  16_31: 0x03e1;
  ENCODE(t1, (value=t1));
 };
 UINT32 d2 NOENCODE {
  0_15: t2;
  16_31: 0x04e1;
  ENCODE(t2, (value=t2));
 };
 UINT32 d3 NOENCODE {
  0_15: t3;
  16_31: 0x05e1;
  ENCODE(t3, (value=t3));
 };
 UINT32 d4 NOENCODE {
  0_15: t4;
  16_31: 0x06e1;
  ENCODE(t4, (value=t4));
 };
}

WR_MULTI()
{
 MEMBER(DATA32 time_hi);
 MEMBER(DATA32 time_lo);

 UINT32 hi NOENCODE {
  0_31: time;
  ENCODE(time_hi, (value = time));
 }
 UINT32 lo NOENCODE {
  0_31: time;
  ENCODE(time_lo, (value = time));
 }
}
# 4 "s115.spec" 2
# 1 "../../common/gsi_febex4.spec" 1




FEBEX_PADDING()
{
    UINT32 pads_data NOENCODE
    {
        0_11: counter;
        12_19: index;
        20_31: 0xADD;
    }
}

FEBEX_EVENT(card)
{
    MEMBER(DATA8 trig);
 MEMBER(DATA32 event_trigger_time_hi);
 MEMBER(DATA32 event_trigger_time_lo);
    MEMBER(DATA16 hit_pattern);

 MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);

    MEMBER(DATA8 pileup[16] ZERO_SUPPRESS);
 MEMBER(DATA8 overflow[16] ZERO_SUPPRESS);
    MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);

    UINT32 sumchannel NOENCODE
    {
        0_7: 0x34;
        8_11: trigger_type;
        12_15: sfpnr;
        16_23: card = MATCH(card);
        24_31: 0xFF;
        ENCODE(trig, (value=trigger_type));
    }

    UINT32 channel_size NOENCODE
    {
        0_1: ignore;
        2_31: size;


    }


    UINT32 event_timestamp_hi NOENCODE
    {
        0_15: timestamp_hi;
        16_31: ignore;

        ENCODE(event_trigger_time_hi, (value = timestamp_hi));
    }

    UINT32 event_timestamp_lo NOENCODE
    {
        0_31: timestamp_lo;
        ENCODE(event_trigger_time_lo, (value = timestamp_lo));
    }

    UINT32 hp NOENCODE
    {
        0_15: hp;
        16_31: ignore;

        ENCODE(hit_pattern, (value = hp));
    }

    UINT32 deadbeef NOENCODE
    {
        0_31: 0xDEADBEEF;
    }

    list(0 <= index < (((channel_size.size) / 4) - 1))
    {
        UINT32 channelids NOENCODE{
            0_15: chan_ts_hi;
            16_23: channel_id_bits;
            24_31: 0xF0;


            ENCODE(channel_trigger_time_hi[channelids.channel_id_bits], (value = chan_ts_hi));
        }
        UINT32 channel_ts NOENCODE
        {
            0_31: chan_ts_lo;
            ENCODE(channel_trigger_time_lo[channelids.channel_id_bits], (value = chan_ts_lo));
        }
        UINT32 chan_enrgy NOENCODE
        {
            0_23: chan_energy;
            24_29: TSF;
            30: pileup_flag;
            31: overflow_flag;

            ENCODE(channel_cfd[channelids.channel_id_bits], (value = TSF));
            ENCODE(channel_energy[channelids.channel_id_bits], (value = chan_energy));
            ENCODE(pileup[channelids.channel_id_bits], (value = pileup_flag));
            ENCODE(overflow[channelids.channel_id_bits], (value = overflow_flag));
        }
        UINT32 future_use NOENCODE
        {
            0_31: 0x00000000;
        }
    }
}

TRACE(board)
{
    MEMBER(DATA16 traces[16][4000] ZERO_SUPPRESS);
    MEMBER(DATA8 channel_id_traces[16] ZERO_SUPPRESS);

    UINT32 header NOENCODE
    {
        0_7: 0x34;
        8_15: other;
        16_19: board = MATCH(board);
        24_31: ch_id;
        ENCODE(channel_id_traces[ch_id], (value = ch_id));

    }

    UINT32 tracesize NOENCODE
    {
        0_31: size;
    }

    UINT32 tracehead NOENCODE
    {
        0_23: other;
        24_31: head;
    }







    list (0 <= j < (tracesize.size / 4 - 2))
    {

        UINT32 channel_trace NOENCODE
        {
            0_13: data1;
            14_15: stuff1;
            16_29: data2;
            30_31: stuff2;

            ENCODE(traces[header.ch_id][2*j+0], (value = data1));
            ENCODE(traces[header.ch_id][2*j+1], (value = data2));
        }

    }


    UINT32 trace_trailer NOENCODE
    {
        0_23: notused;
        24_31: id = RANGE(0xb0,0xbf);
    }
}




FEBEX_EVENT_TRACES(card)
{
    MEMBER(DATA8 trig);
 MEMBER(DATA32 event_trigger_time_hi);
 MEMBER(DATA32 event_trigger_time_lo);
    MEMBER(DATA16 hit_pattern);
    MEMBER(DATA32 num_channels_fired);
    MEMBER(DATA8 board_num);

 MEMBER(DATA8 channel_id[16] ZERO_SUPPRESS);
 MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);

    MEMBER(DATA8 pileup[16] ZERO_SUPPRESS);
 MEMBER(DATA8 overflow[16] ZERO_SUPPRESS);
    MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);





    UINT32 sumchannel NOENCODE
    {
        0_7: 0x34;
        8_11: trigger_type;
        12_15: sfpnr;
        16_23: board_id = MATCH(card);
        24_31: 0xFF;
        ENCODE(board_num, (value = board_id));
        ENCODE(trig, (value=trigger_type));
    }



    UINT32 channel_size NOENCODE
    {
        0_1: ignore;
        2_31: size;

        ENCODE(num_channels_fired, (value = size/4 - 1 ));
    }


    UINT32 event_timestamp_hi NOENCODE
    {
        0_15: timestamp_hi;
        16_31: ignore;

        ENCODE(event_trigger_time_hi, (value = timestamp_hi));
    }

    UINT32 event_timestamp_lo NOENCODE
    {
        0_31: timestamp_lo;
        ENCODE(event_trigger_time_lo, (value = timestamp_lo));
    }

    UINT32 hp NOENCODE
    {
        0_15: hp;
        16_31: ignore;

        ENCODE(hit_pattern, (value = hp));
    }

    UINT32 deadbeef NOENCODE
    {
        0_31: 0xDEADBEEF;
    }

    if (sumchannel.trigger_type == 1)
    {
        list(0 <= index < (((channel_size.size) / 4) - 1))
        {
            UINT32 channelids NOENCODE
            {
                0_15: chan_ts_hi;
                16_23: channel_id_bits;
                24_31: 0xF0;

                ENCODE(channel_id[index], (value = channel_id_bits));
                ENCODE(channel_trigger_time_hi[index], (value = chan_ts_hi));
            }
            UINT32 channel_ts NOENCODE
            {
                0_31: chan_ts_lo;
                ENCODE(channel_trigger_time_lo[index], (value = chan_ts_lo));
            }
            UINT32 chan_enrgy NOENCODE
            {
                0_23: chan_energy;
                24_29: TSF;
                30: pileup_flag;
                31: overflow_flag;

                ENCODE(channel_cfd[index], (value = TSF));
                ENCODE(channel_energy[index], (value = chan_energy));
                ENCODE(pileup[index], (value = pileup_flag));
                ENCODE(overflow[index], (value = overflow_flag));
            }
            UINT32 future_use NOENCODE
            {
                0_31: 0x00000000;
            }
        }





        list (0 <= index < 16)

        {
            select optional
            {
                trace = TRACE(board=card);
            }
        }






    }
    else if (sumchannel.trigger_type == 3)
    {
        several UINT32 dummy NOENCODE;
    }

}
# 5 "s115.spec" 2
# 1 "../../common/gsi_tamex4.spec" 1


TAMEX4_HEADER()
{
 MEMBER(DATA16 post_trig_ns);
 MEMBER(DATA16 pre_trig_ns);
 UINT32 trigger_window NOENCODE
 {
   0_15: post_trig_ns;
  16_31: pre_trig_ns;

  ENCODE(post_trig_ns, (value=post_trig_ns));
  ENCODE(pre_trig_ns, (value=pre_trig_ns));
 }

}

TAMEX4_PADDING()
{
 UINT32 padding NOENCODE
 {
   0_11: counter;
  12_19: index;
  20_31: 0xadd;
 }
}

TAMEX4_TIME_DATA(sfp, card, time_coarse, time_fine, time_edge, time_channel, time_epoch)
{
 MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
 MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);

 UINT32 data NOENCODE
 {
   0_10: coarse;
     11: is_leading;

  12_21: fine;
  22_27: channel;
  28_31: type = 0x8;

  ENCODE(time_coarse APPEND_LIST, (value=coarse));
  ENCODE(time_fine APPEND_LIST, (value=fine));
  ENCODE(time_edge APPEND_LIST, (value=is_leading));
  ENCODE(time_channel APPEND_LIST, (value=channel));
  ENCODE(time_epoch APPEND_LIST, (value=0));
 }

}

TAMEX4_EPOCH_DATA(sfp, card, time_coarse, time_fine, time_edge, time_channel, time_epoch)
{
 MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
 MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);

 UINT32 data NOENCODE
 {
  0_27: epoch;
  28_31: 0x6;

  ENCODE(time_coarse APPEND_LIST, (value=0));
  ENCODE(time_fine APPEND_LIST, (value=0));
  ENCODE(time_edge APPEND_LIST, (value=0));
  ENCODE(time_channel APPEND_LIST, (value=0));
  ENCODE(time_epoch APPEND_LIST, (value=epoch));
 }

}

TAMEX4_SFP(sfp, card)
{
 MEMBER(DATA16 trig);
    MEMBER(DATA32 event_size);
 MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
 MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
 MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);

 UINT32 indicator NOENCODE
 {
    0_7: 0x34;
   8_11: trigger_type;
  12_15: sfp = MATCH(sfp);
  16_23: card = MATCH(card);
  24_31: 0;

 }

 MATCH_END;

 UINT32 data_size NOENCODE
 {

  0_31: bytes;

  ENCODE(event_size, (value=bytes));
 }

 UINT32 tdc_header NOENCODE {
   0_15: lec;
     16: buf_no;
  17_19: reserved;
  20_23: trigger_type;
  24_31: 0xaa;
  ENCODE(trig, (value = trigger_type));
 }

 list (0 <= i < data_size.bytes / 4 - 3)
 {
  select
  {
   epoch = TAMEX4_EPOCH_DATA(sfp=sfp, card=card, time_coarse=time_coarse, time_fine=time_fine, time_edge=time_edge, time_channel=time_channel, time_epoch=time_epoch);
   time = TAMEX4_TIME_DATA(sfp=sfp, card=card, time_coarse=time_coarse, time_fine=time_fine, time_edge=time_edge, time_channel=time_channel, time_epoch=time_epoch);
  }
 }

 UINT32 error_bits NOENCODE
 {
   0_23: bits;
  24_31: 0xee;
 }

 UINT32 trailer NOENCODE
 {
  0_15: lec;
  16: buf_no;
  17_19: reserved;
  20_23: trigger_type;
  24_31: 0xbb;
 }
}
# 6 "s115.spec" 2
# 1 "../../common/vme_mesytec_mdpp16.spec" 1
# 45 "../../common/vme_mesytec_mdpp16.spec"
VME_MESYTEC_MDPP16(geom)
{
  MEMBER(DATA24 adc[16]);
  MEMBER(DATA24 tdc[16]);
  MEMBER(DATA24 trig_tdc[16]);
  MEMBER(DATA24 adc_short[16]);

  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
    0_9: word_number;
    10_12: adc_res;
    13_15: tdc_res;
    16_23: geom = MATCH(geom);
    24_29: 0b000000;
    30_31: 0b01;
  }

  several UINT32 ch_data NOENCODE
  {
    0_15: value;
    16_19: channel;
    20_21: ch_kind;
    22: overflow;
    23: pileup;
    24_27: 0b0000;
    28_31: 0b0001;

    if (ch_kind == 0) {
      ENCODE(adc[channel],
      (value = value));
    }
    if (ch_kind == 1) {
      ENCODE(tdc[channel],
      (value = value));
    }
    if (ch_kind == 2) {
      ENCODE(trig_tdc[channel],
      (value = value));
    }
    if (ch_kind == 3) {
      ENCODE(adc_short[channel],
      (value = value));
    }
  }

  several UINT32 fill_word NOENCODE
  {
    0_31: 0x0;
  }

  UINT32 end_of_event
  {
    0_29: counter;
    30_31: 0b11;
  }

  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,-4,4);
}
# 7 "s115.spec" 2
# 1 "../frs/frs_s115.spec" 1


# 1 "../frs/../../common/vme_caen_v1x90.spec" 1
TDC_HEADER()
{
    UINT32 tdc_header NOENCODE
    {
        0_11: bunch_id;
        12_23: event_id;
        24_25: tdc;
        26: unused;
        27_31: 0b00001;
    }
}

TDC_DATA_V1290()
{
    MEMBER(DATA24 data[128] ZERO_SUPPRESS_MULTI(128));
    MEMBER(DATA8 leadOrTrail[128] ZERO_SUPPRESS_MULTI(128));

    UINT32 tdc_data NOENCODE
    {
        0_20: tdc;
        21_25: chn;
        26: lot;
        27_31: 0b00000;

        ENCODE(data[chn],(value = tdc ));
        ENCODE(leadOrTrail[chn], (value = lot));
    }
}

TDC_DATA_V1190()
{
    MEMBER(DATA24 data[128] ZERO_SUPPRESS_MULTI(128));
    MEMBER(DATA8 leadOrTrail[128] ZERO_SUPPRESS_MULTI(128));

    UINT32 tdc_data NOENCODE
    {
        0_18: tdc;
        19_25: chn;
        26: lot;
        27_31: 0b00000;

        ENCODE(data[chn],(value = tdc ));
        ENCODE(leadOrTrail[chn], (value = lot));
    }
}

TDC_ERROR()
{
    UINT32 tdc_err NOENCODE
    {
        0_14: error_flags;
        15_23: unused1;
        24_25: tdc;
        26: unused2;
        27_31: 0b00100;
    }
}

TDC_TRAILER()
{
    UINT32 tdc_trailer NOENCODE
    {
        0_11: word_count;
        12_23: event_id;
        24_25: tdc;
        26: unused;
        27_31: 0b00011;
    }
}

VME_CAEN_V1290_N()
{
    MEMBER(DATA8 geo);

    UINT32 header NOENCODE
    {
        0_4: geom;
        5_26: event_count;
        27_31: type = MATCH(0b01000);

        ENCODE(geo, (value=geom));
    };

    select several
    {
        tdc_header = TDC_HEADER();
        measurement = TDC_DATA_V1290();
        tdc_err = TDC_ERROR();
        tdc_trailer = TDC_TRAILER();
    };


    optional UINT32 ext_time_tag NOENCODE
    {
        0_26: time_tag;
        27_31: 0b10001;
    };

    UINT32 trailer NOENCODE
    {
        0_4: geom;
        5_20: word_count;
        21_23: unused;
        24: tdc_error;
        25: overflow;
        26: trigger_lost;
        27_31: 0b10000;
    };

}

VME_CAEN_V1190_N()
{

    MEMBER(DATA8 geo);
    UINT32 header NOENCODE
    {
        0_4: geom;
        5_26: event_count;
        27_31: seven_f;

        ENCODE(geo, (value=geom));
    };

    if (header.seven_f != 0b01000)
    {

        UINT32 second1 NOENCODE
        {
            0_31: 0xFFFFFFFF;
        };

        UINT32 real_header NOENCODE
        {
            0_4: geom;
            5_26: event_count;
            27_31: 0b01000;
        }
    }

    select several
    {
        tdc_header = TDC_HEADER();
        measurement = TDC_DATA_V1190();
        tdc_error = TDC_ERROR();
        tdc_trailer = TDC_TRAILER();
    };


    optional UINT32 ext_time_tag NOENCODE
    {
        0_26: time_tag;
        27_31: 0b10001;
    };


    UINT32 trailer NOENCODE
    {
        0_4: geom;
        5_20: word_count;
        21_23: unused;
        24: tdc_error;
        25: overflow;
        26: trigger_lost;
        27_31: whatever;
    };

    optional UINT32 eob NOENCODE;

}
# 4 "../frs/frs_s115.spec" 2
# 1 "../frs/../../common/vme_caen_v830.spec" 1
VME_CAEN_V830(geom)
{
    MEMBER(DATA32 data[32] ZERO_SUPPRESS);

    UINT32 header
    {
        0_15: event_number;
        16_17: ts;
        18_23: count;
        24_25: undefined;
        26: 1;
        27_31: geom = MATCH(geom);
    };

    list (0 <= index < header.count)
    {
        UINT32 ch_data NOENCODE
       {
           0_25: value;
           26: 0;
           27_31: channel;

           ENCODE(data[channel],(value=value));
       }
    }
}
# 5 "../frs/frs_s115.spec" 2
# 1 "../frs/../../common/vme_caen_v7x5.spec" 1




VME_CAEN_V7X5(geom)
{
    MEMBER(DATA24 data[32] ZERO_SUPPRESS);

    UINT32 header NOENCODE
    {
        0_7: undefined;
        8_13: count;
        16_23: crate;
        24_26: 0b010;
        27_31: geom = MATCH(geom);
    }

    list(0 <= index < header.count)
    {
        UINT32 ch_data NOENCODE
       {
            0_11: value;
            12: overflow;
            13: underflow;
            14: valid;
            15: undefined;
            16_20: channel;
            21_23: undefined2;
            24_26: 0b000;
            27_31: geom;


            ENCODE(data[channel],(value = value));
        }
    };

    UINT32 eob NOENCODE
    {
        0_23: nothing;
        24_26: 0b100;
        27_31: id = MATCH(geom);
    }

    list (0 <= i < 2)
    {
        optional UINT32 eob2 NOENCODE
        {
            0_23: nothing;
            24_26: id = MATCH(0b110);
            27_31: geom;
        };
    }
}
# 6 "../frs/frs_s115.spec" 2

TRIG3EVENT()
{
    UINT32 trig3 NOENCODE
    {
        0_31: 0x20202020;
    };
}

SPILL_ON()
{
    MEMBER(DATA8 spillon);
    UINT32 on NOENCODE
    {
        0_31: 0x30303030;
    }
    ENCODE(spillon, (value = 1));
}

SPILL_OFF()
{
    MEMBER(DATA8 spilloff);

    UINT32 off1 NOENCODE
    {
        0_31: 0x4040400a;
    };
    UINT32 off2 NOENCODE
    {
        0_31: 0x4040400b;
    };
    UINT32 off3 NOENCODE
    {
        0_31: 0x4040400c;
    };

    ENCODE(spilloff, (value = 1));
}



BARRIER()
{
    UINT32 barrier NOENCODE
    {
        0_19: no;
        20_31: ba = RANGE(0xF52,0xF58);
    }
}

ZERO_FILLER()
{
    UINT32 filler NOENCODE
    {
        0_31: zero = MATCH(0x00000000);
    }
}


TPAT_CRATE_DATA()
{
    MEMBER(DATA16 tpat);


    UINT32 w1;
    UINT32 w2;
    UINT32 w3;

    UINT32 trigger_pattern
    {
        0_15: pattern;
        16_31: nothing;
        ENCODE(tpat, (value = pattern));
    }


    UINT32 coffee NOENCODE
    {
        0_7: scaler_words;
        8_31: coffee;
    }

    if (coffee.coffee == 0xc0ffee)
    {
        list (0 <= i < coffee.scaler_words * 3)
        {
            UINT32 scaler NOENCODE
            {
                0_31: something;
            }
        }

        UINT32 dead NOENCODE
        {
            0_31: 0xDEADDEAD;
        }

        several UINT32 eob NOENCODE;
    }
    else
    {

        several UINT32 filler NOENCODE;
    }


}

MVLC_SCALER(geo)
{
    MEMBER(DATA32 scalers[32] ZERO_SUPPRESS);

    UINT32 header NOENCODE
    {
        0_15: whatever;
        16: 0;
        18_23: nlw;
        24_26: type;
        27_31: geom = MATCH(geo);
    };

    list (0 <= i < header.nlw)
    {
        UINT32 scaler NOENCODE
        {
            0_31: value;
            ENCODE(scalers[i], (value=value));
        }
    }

    UINT32 trailer NOENCODE;

}


MAIN_CRATE_DATA()
{

    barrier0 = BARRIER();

    v830 = MVLC_SCALER(geo=8);



    barrier1 = BARRIER();
    v792 = VME_CAEN_V7X5(geom=14);

    UINT32 aaahhh NOENCODE { 0_31: 0xaaaa1290; }
    UINT32 exxxxx NOENCODE;

    barrier2 = BARRIER();
    v1290 = VME_CAEN_V1290_N();
    optional UINT32 eodb NOENCODE;

}


TPC_CRATE_DATA()
{
    select several
    {
        barrier0 = BARRIER();
        v785 = VME_CAEN_V7X5(geom=8);
        v775 = VME_CAEN_V7X5(geom=12);
    }

    UINT32 aaahhh NOENCODE { 0_31: 0xaaaa1190; }
    UINT32 exxxxx NOENCODE;

    barrier1 = BARRIER();
    v1190 = VME_CAEN_V1190_N();


    select several
    {
        dummy = DUMMY();
    }
}


USER_CRATE_DATA()
{
    barrier0 = BARRIER();


    v830 = MVLC_SCALER(geo=8);



    select several
    {
        barrier1 = BARRIER();
        v775[0] = VME_CAEN_V7X5(geom=8);
        v775[1] = VME_CAEN_V7X5(geom=9);
        v785[0] = VME_CAEN_V7X5(geom=10);
        v785[1] = VME_CAEN_V7X5(geom=12);
    }

    UINT32 aaahhh NOENCODE { 0_31: 0xaaaa1290; };
    UINT32 filler1 NOENCODE;
    barrier2 = BARRIER();
    v1290 = VME_CAEN_V1290_N();
    optional UINT32 eodb NOENCODE;
}

VULOM_TPAT()
{
    UINT32 vulom_head NOENCODE
    {
        0_15: counter;
        16_31: head = MATCH(0xF500);
    };


    list (0 <= i < vulom_head.counter)
    {
        UINT32 tp NOENCODE;
    };
}


TRAVMUS_CRATE_DATA()
{
    UINT32 coffee NOENCODE
    {
        0_7: counter;
        8_31: 0xC0FFEE;
    }

    if (coffee.counter == 0)
    {
        UINT32 dead NOENCODE
        {
            0_31: 0xDEADDEAD;
        }

        UINT32 vtime NOENCODE;
        UINT32 dtime NOENCODE;

        UINT32 barrier NOENCODE
        {
            0_15: counter;
            16_31: bar = MATCH(0xF520);

        };

        select several
        {
            mdpp = VME_MESYTEC_MDPP16(geom=8);
        };

    }
    else
    {
        select several
        {
            dummy = DUMMY();
        }
    }
}
# 8 "s115.spec" 2
# 1 "../../common/general.spec" 1



BAD_EVENT()
{
    MEMBER(DATA8 bad);

    UINT32 be NOENCODE
    {
        0_31: b = MATCH(0xbad00bad);
    }

    ENCODE(bad, (value = 1));
}

DUMMY()
{
    UINT32 no NOENCODE;
}
# 9 "s115.spec" 2


external EXT_AIDA();



SUBEVENT(aida_subev)
{
    ts =TIMESTAMP_WHITERABBIT(id = 0x700);
    external data = EXT_AIDA();
}


SUBEVENT(febex_subev)
{
    select optional
    {
        ts = TIMESTAMP_WHITERABBIT(id = 0x400);
    };

    select several
    {
        padding = FEBEX_PADDING();
    };

    select several
    {
        data[0] = FEBEX_EVENT(card = 0);
        data[1] = FEBEX_EVENT(card = 1);
        data[2] = FEBEX_EVENT(card = 2);
        data[3] = FEBEX_EVENT(card = 3);
        data[4] = FEBEX_EVENT(card = 4);
        data[5] = FEBEX_EVENT(card = 5);
    };
}


SUBEVENT(bplast_subev)
{
    select optional
    {
        ts = TIMESTAMP_WHITERABBIT(id = 0x500);
    };

    select optional
    {
        trigger_window = TAMEX4_HEADER();
    };

    select several
    {
        padding = TAMEX4_PADDING();
    };

    select several
    {
        tamex[0] = TAMEX4_SFP(sfp = 0, card = 0);
        tamex[1] = TAMEX4_SFP(sfp = 0, card = 1);
        tamex[2] = TAMEX4_SFP(sfp = 0, card = 2);
        tamex[3] = TAMEX4_SFP(sfp = 0, card = 3);
        tamex[4] = TAMEX4_SFP(sfp = 0, card = 4);
        tamex[5] = TAMEX4_SFP(sfp = 0, card = 5);
        tamex[6] = TAMEX4_SFP(sfp = 0, card = 6);
        tamex[7] = TAMEX4_SFP(sfp = 0, card = 7);
        tamex[8] = TAMEX4_SFP(sfp = 0, card = 8);
    };
}

SUBEVENT(frs_main_subev)
{
    select several
    {
        trig3 = TRIG3EVENT();
    };

    select several
    {
        spill_on = SPILL_ON();
    };

    select several
    {
        spill_off = SPILL_OFF();
    };

    UINT32 sevens NOENCODE
    {
        0_31: 0x77777777;
    }

    select optional
    {
        data = MAIN_CRATE_DATA();
    };
}

SUBEVENT(frs_tpc_subev)
{
    optional UINT32 be { 0_31: b = MATCH(0xbad00bad);}

    select several
    {
        trig3 = TRIG3EVENT();
    };

    select several
    {
        spill_on = SPILL_ON();
    };

    select several
    {
        spill_off = SPILL_OFF();
    };

    select optional
    {
        data = TPC_CRATE_DATA();
    };
}

SUBEVENT(frs_user_subev)
{
    select several
    {
        trig3 = TRIG3EVENT();
    };

    select several
    {
        spill_on = SPILL_ON();
    };

    select several
    {
        spill_off = SPILL_OFF();
    };

    UINT32 sevens NOENCODE
    {
        0_31: 0x77777777;
    };


    select optional
    {
        data = USER_CRATE_DATA();
    }
}

SUBEVENT(frs_tpat_subev)
{
    select optional
    {
        wr = TIMESTAMP_WHITERABBIT(id = 0x100);
    };

    select several
    {
        trig3 = TRIG3EVENT();
    };

    select optional
    {
        data = TPAT_CRATE_DATA();
    }
}

SUBEVENT(frs_travmus_subev)
{
    select optional
    {
        wr = TIMESTAMP_WHITERABBIT(id=0x200);
    };

    select optional
    {
        stuff = VULOM_TPAT();
    }

    select optional
    {
        data = TRAVMUS_CRATE_DATA();
    };
}


EVENT
{
    revisit aida = aida_subev(type = 10, subtype = 1, procid = 90, control = 37);
    germanium = febex_subev(type = 10, subtype = 1, procid = 60, control = 20);
    bplast = bplast_subev(type = 10, subtype = 1, procid = 80, control = 20);

    frsmain = frs_main_subev(procid = 10);
    frstpc = frs_tpc_subev(procid = 20);
    frsuser = frs_user_subev(procid = 30);
    frstpat = frs_tpat_subev(procid = 15);

    frstravmus = frs_travmus_subev(procid = 35, control = 30);

    ignore_unknown_subevent;
};

# 1 "mapping.hh" 1

SIGNAL(SPILL_ON, frsmain.spill_on.spillon, DATA8);
SIGNAL(SPILL_OFF, frsmain.spill_off.spilloff, DATA8);

SIGNAL(ZERO_SUPPRESS: SCALERS2_32);

SIGNAL(SCALERS1_1, frsmain.data.v830.scalers[0], SCALERS1_32, frsmain.data.v830.scalers[31], DATA32);

SIGNAL(ZERO_SUPPRESS: SCI_TAC_DE_32);
SIGNAL(SCI_TAC_DE_1, frsmain.data.v792.data[0], SCI_TAC_DE_32, frsmain.data.v792.data[31], DATA24);

SIGNAL(ZERO_SUPPRESS_MULTI(128): SCI_MHTDC_T_32);
SIGNAL(SCI_MHTDC_T_1, frsmain.data.v1290.measurement.data[0], SCI_MHTDC_T_32, frsmain.data.v1290.measurement.data[31], DATA24);
SIGNAL(ZERO_SUPPRESS_MULTI(128): SCI_MHTDC_LOT_32);
SIGNAL(SCI_MHTDC_LOT_1, frsmain.data.v1290.measurement.leadOrTrail[0], SCI_MHTDC_LOT_32, frsmain.data.v1290.measurement.leadOrTrail[31], DATA8);
# 28 "mapping.hh"
SIGNAL(ZERO_SUPPRESS: TPC_ADC7_32);
SIGNAL(TPC_ADC1_1, frstpc.data.v775.data[0], TPC_ADC1_8, frstpc.data.v775.data[7], DATA24);
SIGNAL(TPC_ADC2_1, frstpc.data.v775.data[8], TPC_ADC2_8, frstpc.data.v775.data[15], DATA24);
SIGNAL(TPC_ADC3_1, frstpc.data.v775.data[16], TPC_ADC3_8, frstpc.data.v775.data[23], DATA24);
SIGNAL(TPC_ADC4_1, frstpc.data.v775.data[24], TPC_ADC4_8, frstpc.data.v775.data[31], DATA24);
SIGNAL(TPC_ADC5_1, frstpc.data.v785.data[0], TPC_ADC5_8, frstpc.data.v785.data[7], DATA24);
SIGNAL(TPC_ADC6_1, frstpc.data.v785.data[8], TPC_ADC6_8, frstpc.data.v785.data[15], DATA24);
SIGNAL(TPC_ADC7_1, frstpc.data.v785.data[16], TPC_ADC7_8, frstpc.data.v785.data[23], DATA24);

SIGNAL(ZERO_SUPPRESS_MULTI(128): TPC_TDC_T_128);
SIGNAL(TPC_TDC_T_1, frstpc.data.v1190.measurement.data[0], TPC_TDC_T_128, frstpc.data.v1190.measurement.data[127], DATA24);
SIGNAL(ZERO_SUPPRESS_MULTI(128): TPC_TDC_LOT_128);
SIGNAL(TPC_TDC_LOT_1, frstpc.data.v1190.measurement.leadOrTrail[0], TPC_TDC_LOT_128, frstpc.data.v1190.measurement.leadOrTrail[127], DATA8);




SIGNAL(SCALERS2_1, frsuser.data.v830.scalers[0], SCALERS2_32, frsuser.data.v830.scalers[31], DATA32);

SIGNAL(ZERO_SUPPRESS: SCI_TAC_DT_32);
SIGNAL(SCI_TAC_DT_1, frsuser.data.v785[1].data[0], SCI_TAC_DT_32, frsuser.data.v785[1].data[31], DATA24);

SIGNAL(ZERO_SUPPRESS: MUSIC5_E_8);
SIGNAL(MUSIC1_E_1, frsuser.data.v785[0].data[0], MUSIC1_E_8, frsuser.data.v785[0].data[7], DATA24);
SIGNAL(MUSIC2_E_1, frsuser.data.v785[0].data[8], MUSIC2_E_8, frsuser.data.v785[0].data[15], DATA24);

SIGNAL(ZERO_SUPPRESS_MULTI(128): MUSIC1_T_8);
SIGNAL(MUSIC1_T_1, frsuser.data.v1290.measurement.data[16], MUSIC1_T_8, frsuser.data.v1290.measurement.data[23], DATA24);
SIGNAL(ZERO_SUPPRESS_MULTI(128): MUSIC1_LOT_8);
SIGNAL(MUSIC1_LOT_1, frsuser.data.v1290.measurement.leadOrTrail[16], MUSIC1_LOT_8, frsuser.data.v1290.measurement.leadOrTrail[23], DATA8);

SIGNAL(ZERO_SUPPRESS_MULTI(128): MUSIC2_T_8);
SIGNAL(MUSIC2_T_1, frsuser.data.v1290.measurement.data[24], MUSIC2_T_8, frsuser.data.v1290.measurement.data[31], DATA24);
SIGNAL(ZERO_SUPPRESS_MULTI(128): MUSIC2_LOT_8);
SIGNAL(MUSIC2_LOT_1, frsuser.data.v1290.measurement.leadOrTrail[24], MUSIC2_LOT_8, frsuser.data.v1290.measurement.leadOrTrail[31], DATA8);




SIGNAL(WR_ID, frstpat.wr.subsystem_id, DATA12);
SIGNAL(WR_T1, frstpat.wr.t1, DATA16);
SIGNAL(WR_T2, frstpat.wr.t2, DATA16);
SIGNAL(WR_T3, frstpat.wr.t3, DATA16);
SIGNAL(WR_T4, frstpat.wr.t4, DATA16);
SIGNAL(TPAT, frstpat.data.tpat, DATA16);





SIGNAL(MUSIC4_E_1, frstravmus.data.mdpp.adc[0], MUSIC4_E_8, frstravmus.data.mdpp.adc[7], DATA24);
SIGNAL(MUSIC5_E_1, frstravmus.data.mdpp.adc[8], MUSIC5_E_8, frstravmus.data.mdpp.adc[15], DATA24);
# 213 "s115.spec" 2
