/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

BAD_EVENT()
{
  MEMBER(DATA8 bad);
  UINT32 be NOENCODE
  {
     0_31: b = MATCH(0xbad00bad);
  }
  ENCODE(bad,(value=1));

}

BARRIER()
{
  UINT32 barrier NOENCODE
  {
     0_19: no;
    20_31: ba = RANGE(0xf52,0xf58);
  }
}

DUMMY()
{
  UINT32 no NOENCODE;
}

ERR_WORD_SIX()
{
  UINT32 err NOENCODE
  {
     0_31: err = MATCH(0x06000000);
  }
}

external EXT_AIDA()
;

FATIMA_VME_SCALERS()
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  UINT32 sc_header NOENCODE
  {
     0_07: empty1;
     8_12: nwords;
    13_26: empty2;
    27_31: geo = MATCH(15);
  }
  list(0<=index<sc_header.nwords)
  {
    UINT32 sc_data NOENCODE
    {
       0_31: value;
    }
    ENCODE(data[index],(value=sc_data.value));

  }
  UINT32 scaler_trailer NOENCODE;
}

FEBEX_EVENT(card)
{
  MEMBER(DATA8 trig);
  MEMBER(DATA32 event_trigger_time_hi);
  MEMBER(DATA32 event_trigger_time_lo);
  MEMBER(DATA16 hit_pattern);
  MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);
  MEMBER(DATA8 pileup[16] ZERO_SUPPRESS);
  MEMBER(DATA8 overflow[16] ZERO_SUPPRESS);
  MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);
  UINT32 sumchannel NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfpnr;
    16_23: card = MATCH(card);
    24_31: 255;
    ENCODE(trig,(value=trigger_type));
  }
  UINT32 channel_size NOENCODE
  {
     0_01: ignore;
     2_31: size;
  }
  UINT32 event_timestamp_hi NOENCODE
  {
     0_15: timestamp_hi;
    16_31: ignore;
    ENCODE(event_trigger_time_hi,(value=timestamp_hi));
  }
  UINT32 event_timestamp_lo NOENCODE
  {
     0_31: timestamp_lo;
    ENCODE(event_trigger_time_lo,(value=timestamp_lo));
  }
  UINT32 hp NOENCODE
  {
     0_15: hp;
    16_31: ignore;
    ENCODE(hit_pattern,(value=hp));
  }
  UINT32 deadbeef NOENCODE
  {
     0_31: 0xdeadbeef;
  }
  list(0<=index<((channel_size.size / 4) - 1))
  {
    UINT32 channelids NOENCODE
    {
       0_15: chan_ts_hi;
      16_23: channel_id_bits;
      24_31: 240;
      ENCODE(channel_trigger_time_hi[channelids.channel_id_bits],(value=chan_ts_hi));
    }
    UINT32 channel_ts NOENCODE
    {
       0_31: chan_ts_lo;
      ENCODE(channel_trigger_time_lo[channelids.channel_id_bits],(value=chan_ts_lo));
    }
    UINT32 chan_enrgy NOENCODE
    {
       0_23: chan_energy;
      24_29: TSF;
         30: pileup_flag;
         31: overflow_flag;
      ENCODE(channel_cfd[channelids.channel_id_bits],(value=TSF));
      ENCODE(channel_energy[channelids.channel_id_bits],(value=chan_energy));
      ENCODE(pileup[channelids.channel_id_bits],(value=pileup_flag));
      ENCODE(overflow[channelids.channel_id_bits],(value=overflow_flag));
    }
    UINT32 future_use NOENCODE
    {
       0_31: 0;
    }
  }
}

FEBEX_EVENT_TRACES(card)
{
  MEMBER(DATA8 trig);
  MEMBER(DATA32 event_trigger_time_hi);
  MEMBER(DATA32 event_trigger_time_lo);
  MEMBER(DATA16 hit_pattern);
  MEMBER(DATA32 num_channels_fired);
  MEMBER(DATA8 board_num);
  MEMBER(DATA8 channel_id[16] ZERO_SUPPRESS);
  MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);
  MEMBER(DATA8 pileup[16] ZERO_SUPPRESS);
  MEMBER(DATA8 overflow[16] ZERO_SUPPRESS);
  MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);
  UINT32 sumchannel NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfpnr;
    16_23: board_id = MATCH(card);
    24_31: 255;
    ENCODE(board_num,(value=board_id));
    ENCODE(trig,(value=trigger_type));
  }
  UINT32 channel_size NOENCODE
  {
     0_01: ignore;
     2_31: size;
    ENCODE(num_channels_fired,(value=((size / 4) - 1)));
  }
  UINT32 event_timestamp_hi NOENCODE
  {
     0_15: timestamp_hi;
    16_31: ignore;
    ENCODE(event_trigger_time_hi,(value=timestamp_hi));
  }
  UINT32 event_timestamp_lo NOENCODE
  {
     0_31: timestamp_lo;
    ENCODE(event_trigger_time_lo,(value=timestamp_lo));
  }
  UINT32 hp NOENCODE
  {
     0_15: hp;
    16_31: ignore;
    ENCODE(hit_pattern,(value=hp));
  }
  UINT32 deadbeef NOENCODE
  {
     0_31: 0xdeadbeef;
  }
  if((sumchannel.trigger_type == 1))
  {
    list(0<=index<((channel_size.size / 4) - 1))
    {
      UINT32 channelids NOENCODE
      {
         0_15: chan_ts_hi;
        16_23: channel_id_bits;
        24_31: 240;
        ENCODE(channel_id[index],(value=channel_id_bits));
        ENCODE(channel_trigger_time_hi[index],(value=chan_ts_hi));
      }
      UINT32 channel_ts NOENCODE
      {
         0_31: chan_ts_lo;
        ENCODE(channel_trigger_time_lo[index],(value=chan_ts_lo));
      }
      UINT32 chan_enrgy NOENCODE
      {
         0_23: chan_energy;
        24_29: TSF;
           30: pileup_flag;
           31: overflow_flag;
        ENCODE(channel_cfd[index],(value=TSF));
        ENCODE(channel_energy[index],(value=chan_energy));
        ENCODE(pileup[index],(value=pileup_flag));
        ENCODE(overflow[index],(value=overflow_flag));
      }
      UINT32 future_use NOENCODE
      {
         0_31: 0;
      }
    }
    list(0<=index<16)
    {
      select optional
      {
        trace = TRACE(board=card);
      }
    }
  }
  else
  {
    if((sumchannel.trigger_type == 3))
    {
      several UINT32 dummy NOENCODE;
    }
  }
}

FEBEX_PADDING()
{
  UINT32 pads_data NOENCODE
  {
     0_11: counter;
    12_19: index;
    20_31: 0xadd;
  }
}

MAIN_CRATE_DATA()
{
  barrier0 = BARRIER();
  v830 = VME_CAEN_V830(geom=8);
  filler0 = ZERO_FILLER();
  barrier1 = BARRIER();
  v792 = VME_CAEN_V7X5(geom=14);
  UINT32 aaahhh NOENCODE
  {
     0_31: 0xaaaa1290;
  }
  UINT32 exxxxx NOENCODE;
  barrier2 = BARRIER();
  v1290 = VME_CAEN_V1290_N();
  optional UINT32 eodb NOENCODE;
}

SPILL_OFF()
{
  MEMBER(DATA8 spilloff);
  UINT32 off1 NOENCODE
  {
     0_31: 0x4040400a;
  }
  UINT32 off2 NOENCODE
  {
     0_31: 0x4040400b;
  }
  UINT32 off3 NOENCODE
  {
     0_31: 0x4040400c;
  }
  ENCODE(spilloff,(value=1));

}

SPILL_ON()
{
  MEMBER(DATA8 spillon);
  UINT32 on NOENCODE
  {
     0_31: 0x30303030;
  }
  ENCODE(spillon,(value=1));

}

TAMEX4_EPOCH_DATA(sfp,card,time_coarse,time_fine,time_edge,time_channel,
                  time_epoch)
{
  MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);
  UINT32 data NOENCODE
  {
     0_27: epoch;
    28_31: 6;
    ENCODE(time_coarse APPEND_LIST,(value=0));
    ENCODE(time_fine APPEND_LIST,(value=0));
    ENCODE(time_edge APPEND_LIST,(value=0));
    ENCODE(time_channel APPEND_LIST,(value=0));
    ENCODE(time_epoch APPEND_LIST,(value=epoch));
  }
}

TAMEX4_HEADER()
{
  MEMBER(DATA16 post_trig_ns);
  MEMBER(DATA16 pre_trig_ns);
  UINT32 trigger_window NOENCODE
  {
     0_15: post_trig_ns;
    16_31: pre_trig_ns;
    ENCODE(post_trig_ns,(value=post_trig_ns));
    ENCODE(pre_trig_ns,(value=pre_trig_ns));
  }
}

TAMEX4_PADDING()
{
  UINT32 padding NOENCODE
  {
     0_11: counter;
    12_19: index;
    20_31: 0xadd;
  }
}

TAMEX4_SFP(sfp,card)
{
  MEMBER(DATA16 trig);
  MEMBER(DATA32 event_size);
  MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);
  UINT32 indicator NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfp = MATCH(sfp);
    16_23: card = MATCH(card);
    24_31: 0;
  }
  MATCH_END;
  UINT32 data_size NOENCODE
  {
     0_31: bytes;
    ENCODE(event_size,(value=bytes));
  }
  UINT32 tdc_header NOENCODE
  {
     0_15: lec;
       16: buf_no;
    17_19: reserved;
    20_23: trigger_type;
    24_31: 170;
    ENCODE(trig,(value=trigger_type));
  }
  list(0<=i<((data_size.bytes / 4) - 3))
  {
    select
    {
      epoch = TAMEX4_EPOCH_DATA(sfp=sfp,card=card,time_coarse=time_coarse,
                                time_fine=time_fine,time_edge=time_edge,
                                time_channel=time_channel,time_epoch=time_epoch);
      time = TAMEX4_TIME_DATA(sfp=sfp,card=card,time_coarse=time_coarse,
                              time_fine=time_fine,time_edge=time_edge,
                              time_channel=time_channel,time_epoch=time_epoch);
    }
  }
  UINT32 error_bits NOENCODE
  {
     0_23: bits;
    24_31: 238;
  }
  UINT32 trailer NOENCODE
  {
     0_15: lec;
       16: buf_no;
    17_19: reserved;
    20_23: trigger_type;
    24_31: 187;
  }
}

TAMEX4_TIME_DATA(sfp,card,time_coarse,time_fine,time_edge,time_channel,
                 time_epoch)
{
  MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);
  UINT32 data NOENCODE
  {
     0_10: coarse;
       11: is_leading;
    12_21: fine;
    22_27: channel;
    28_31: type = CHECK(8);
    ENCODE(time_coarse APPEND_LIST,(value=coarse));
    ENCODE(time_fine APPEND_LIST,(value=fine));
    ENCODE(time_edge APPEND_LIST,(value=is_leading));
    ENCODE(time_channel APPEND_LIST,(value=channel));
    ENCODE(time_epoch APPEND_LIST,(value=0));
  }
}

TDC_DATA_V1190()
{
  MEMBER(DATA24 data[128] ZERO_SUPPRESS_MULTI(128));
  MEMBER(DATA8 leadOrTrail[128] ZERO_SUPPRESS_MULTI(128));
  UINT32 tdc_data NOENCODE
  {
     0_18: tdc;
    19_25: chn;
       26: lot;
    27_31: 0;
    ENCODE(data[chn],(value=tdc));
    ENCODE(leadOrTrail[chn],(value=lot));
  }
}

TDC_DATA_V1290()
{
  MEMBER(DATA24 data[128] ZERO_SUPPRESS_MULTI(128));
  MEMBER(DATA8 leadOrTrail[128] ZERO_SUPPRESS_MULTI(128));
  UINT32 tdc_data NOENCODE
  {
     0_20: tdc;
    21_25: chn;
       26: lot;
    27_31: 0;
    ENCODE(data[chn],(value=tdc));
    ENCODE(leadOrTrail[chn],(value=lot));
  }
}

TDC_ERROR()
{
  UINT32 tdc_err NOENCODE
  {
     0_14: error_flags;
    15_23: unused1;
    24_25: tdc;
       26: unused2;
    27_31: 4;
  }
}

TDC_HEADER()
{
  UINT32 tdc_header NOENCODE
  {
     0_11: bunch_id;
    12_23: event_id;
    24_25: tdc;
       26: unused;
    27_31: 1;
  }
}

TDC_TRAILER()
{
  UINT32 tdc_trailer NOENCODE
  {
     0_11: word_count;
    12_23: event_id;
    24_25: tdc;
       26: unused;
    27_31: 3;
  }
}

TIMESTAMP_WHITERABBIT(id)
{
  MEMBER(DATA12 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_11: id = MATCH(id);
    12_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

TIMESTAMP_WHITERABBIT_EXTENDED(id)
{
  MEMBER(DATA16 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_12: id = MATCH(id);
    13_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

TPAT_CRATE_DATA()
{
  MEMBER(DATA16 tpat);
  UINT32 w1;
  UINT32 w2;
  UINT32 w3;
  UINT32 trigger_pattern
  {
     0_15: pattern;
    16_31: nothing;
    ENCODE(tpat,(value=pattern));
  }
}

TPC_CRATE_DATA()
{
  select several
  {
    barrier0 = BARRIER();
    v785 = VME_CAEN_V7X5(geom=8);
    v775 = VME_CAEN_V7X5(geom=12);
  }
  UINT32 aaahhh NOENCODE
  {
     0_31: 0xaaaa1190;
  }
  UINT32 exxxxx NOENCODE;
  barrier[2] = BARRIER();
  v1190 = VME_CAEN_V1190_N();
}

TRACE(board)
{
  MEMBER(DATA16 traces[16][4000] ZERO_SUPPRESS);
  MEMBER(DATA8 channel_id_traces[16] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     0_07: 52;
     8_15: other;
    16_19: board = MATCH(board);
    24_31: ch_id;
    ENCODE(channel_id_traces[ch_id],(value=ch_id));
  }
  UINT32 tracesize NOENCODE
  {
     0_31: size;
  }
  UINT32 tracehead NOENCODE
  {
     0_23: other;
    24_31: head;
  }
  list(0<=j<((tracesize.size / 4) - 2))
  {
    UINT32 channel_trace NOENCODE
    {
       0_13: data1;
      14_15: stuff1;
      16_29: data2;
      30_31: stuff2;
      ENCODE(traces[header.ch_id][((2 * j) + 0)],(value=data1));
      ENCODE(traces[header.ch_id][((2 * j) + 1)],(value=data2));
    }
  }
  UINT32 trace_trailer NOENCODE
  {
     0_23: notused;
    24_31: id = RANGE(176,191);
  }
}

TRIG3EVENT()
{
  UINT32 trig3 NOENCODE
  {
     0_31: 0x20202020;
  }
}

USER_CRATE_DATA()
{
  barrier0 = BARRIER();
  v830 = VME_CAEN_V830(geom=6);
  filler0 = ZERO_FILLER();
  select several
  {
    barrier1 = BARRIER();
    v775[0] = VME_CAEN_V7X5(geom=8);
    v775[1] = VME_CAEN_V7X5(geom=9);
    v785[0] = VME_CAEN_V7X5(geom=10);
    v785[1] = VME_CAEN_V7X5(geom=12);
  }
}

VME_CAEN_V1190_N()
{
  MEMBER(DATA8 geo);
  UINT32 header NOENCODE
  {
     0_04: geom;
     5_26: event_count;
    27_31: seven_f;
    ENCODE(geo,(value=geom));
  }
  if((header.seven_f != 8))
  {
    UINT32 second1 NOENCODE
    {
       0_31: 0xffffffff;
    }
    UINT32 real_header NOENCODE
    {
       0_04: geom;
       5_26: event_count;
      27_31: 8;
    }
  }
  select several
  {
    tdc_header = TDC_HEADER();
    measurement = TDC_DATA_V1190();
    tdc_error = TDC_ERROR();
    tdc_trailer = TDC_TRAILER();
  }
  optional UINT32 ext_time_tag NOENCODE
  {
     0_26: time_tag;
    27_31: 17;
  }
  UINT32 trailer NOENCODE
  {
     0_04: geom;
     5_20: word_count;
    21_23: unused;
       24: tdc_error;
       25: overflow;
       26: trigger_lost;
    27_31: whatever;
  }
  optional UINT32 eob NOENCODE;
}

VME_CAEN_V1290_N()
{
  MEMBER(DATA8 geo);
  UINT32 header NOENCODE
  {
     0_04: geom;
     5_26: event_count;
    27_31: type = MATCH(8);
    ENCODE(geo,(value=geom));
  }
  select several
  {
    tdc_header = TDC_HEADER();
    measurement = TDC_DATA_V1290();
    tdc_err = TDC_ERROR();
    tdc_trailer = TDC_TRAILER();
  }
  optional UINT32 ext_time_tag NOENCODE
  {
     0_26: time_tag;
    27_31: 17;
  }
  UINT32 trailer NOENCODE
  {
     0_04: geom;
     5_20: word_count;
    21_23: unused;
       24: tdc_error;
       25: overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1751(board)
{
  MEMBER(DATA8 board_id);
  MEMBER(DATA8 channels);
  MEMBER(DATA32 board_time);
  MEMBER(DATA32 channel_time[64] NO_INDEX_LIST);
  MEMBER(DATA16 chan_ext_time[64] NO_INDEX_LIST);
  MEMBER(DATA12 chan_fine_time[64] NO_INDEX_LIST);
  MEMBER(DATA16 qshort[64] NO_INDEX_LIST);
  MEMBER(DATA16 qlong[64] NO_INDEX_LIST);
  UINT32 board_agg_size NOENCODE
  {
     0_27: event_size;
    28_31: 10;
  }
  UINT32 board_details NOENCODE
  {
     0_07: channels;
     8_23: pattern;
    24_25: empty;
       26: board_fail;
    27_31: id = MATCH(board);
    ENCODE(channels,(value=channels));
    ENCODE(board_id,(value=id));
  }
  UINT32 board_agg_counter NOENCODE
  {
     0_22: counter;
    23_31: empty;
  }
  UINT32 board_agg_timetag NOENCODE
  {
     0_31: time_tag;
    ENCODE(board_time,(value=time_tag));
  }
  if((board_agg_size.event_size > 4))
  {
    list(0<=index<((board_agg_size.event_size - 4) / 6))
    {
      UINT32 channel_agg_size NOENCODE
      {
         0_21: size;
        22_27: empty;
        28_31: format;
      }
      UINT32 format_one NOENCODE
      {
         0_15: no_wave_samples;
        16_17: empty;
           18: ed;
        19_21: dp1;
        22_24: dp2;
        25_26: ap;
           27: es;
           28: ee;
           29: et;
           30: eq;
           31: dt;
      }
      if((channel_agg_size.format == 4))
      {
        UINT32 format_two NOENCODE
        {
           0_02: ex;
              3: pp;
              4: dm;
           5_07: interp;
           8_31: empty;
        }
        if((format_one.et == 1))
        {
          UINT32 channel_time_tag NOENCODE
          {
             0_31: time_tag;
            ENCODE(channel_time APPEND_LIST,(value=time_tag));
          }
        }
        if(((format_one.ee == 1) && (channel_agg_size.format == 4)))
        {
          if((format_two.ex == 0))
          {
            UINT32 extras NOENCODE
            {
               0_15: baseline;
              16_31: ext_time;
              ENCODE(chan_ext_time APPEND_LIST,(value=ext_time));
            }
          }
          else
          {
            if((format_two.ex == 1))
            {
              UINT32 extras NOENCODE
              {
                 0_15: flags;
                16_31: ext_time;
                ENCODE(chan_ext_time APPEND_LIST,(value=ext_time));
              }
            }
            else
            {
              if((format_two.ex == 2))
              {
                UINT32 extras NOENCODE
                {
                   0_09: fine_time;
                  10_15: flags;
                  16_31: ext_time;
                  ENCODE(chan_fine_time APPEND_LIST,(value=fine_time));
                  ENCODE(chan_ext_time APPEND_LIST,(value=ext_time));
                }
              }
              else
              {
                if((format_two.ex == 4))
                {
                  UINT32 extras NOENCODE
                  {
                     0_15: baseline;
                    16_26: fine_time;
                    27_31: flags;
                    ENCODE(chan_fine_time APPEND_LIST,(value=fine_time));
                  }
                }
                else
                {
                  if((format_two.ex == 5))
                  {
                    UINT32 extras NOENCODE
                    {
                       0_09: midscale;
                      10_19: sazc;
                      20_29: sbzc;
                         30: pp;
                         31: dm;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if((format_one.et == 1))
        {
          UINT32 channel_time_tag NOENCODE
          {
             0_31: time_tag;
            ENCODE(channel_time APPEND_LIST,(value=time_tag));
          }
        }
      }
      if((format_one.eq == 1))
      {
        UINT32 qdata NOENCODE
        {
           0_14: qshort;
             15: empty;
          16_31: qlong;
          ENCODE(qshort APPEND_LIST,(value=qshort));
          ENCODE(qlong APPEND_LIST,(value=qlong));
        }
      }
    }
  }
}

VME_CAEN_V7X5(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     0_07: undefined;
     8_13: count;
    16_23: crate;
    24_26: 2;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_11: value;
         12: overflow;
         13: underflow;
         14: valid;
         15: undefined;
      16_20: channel;
      21_23: undefined2;
      24_26: 0;
      27_31: geom;
      ENCODE(data[channel],(value=value));
    }
  }
  UINT32 eob NOENCODE
  {
     0_23: nothing;
    24_26: 4;
    27_31: id = MATCH(geom);
  }
  list(0<=i<2)
  {
    optional UINT32 eob2 NOENCODE
    {
       0_23: nothing;
      24_26: id = MATCH(6);
      27_31: geom;
    }
  }
}

VME_CAEN_V830(geom)
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  UINT32 header
  {
     0_15: event_number;
    16_17: ts;
    18_23: count;
    24_25: undefined;
       26: 1;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_25: value;
         26: 0;
      27_31: channel;
      ENCODE(data[channel],(value=value));
    }
  }
}

WR_MULTI()
{
  MEMBER(DATA32 time_hi);
  MEMBER(DATA32 time_lo);
  UINT32 hi NOENCODE
  {
     0_31: time;
    ENCODE(time_hi,(value=time));
  }
  UINT32 lo NOENCODE
  {
     0_31: time;
    ENCODE(time_lo,(value=time));
  }
}

ZERO_FILLER()
{
  UINT32 filler NOENCODE
  {
     0_31: zero = MATCH(0);
  }
}

SUBEVENT(aida_subev)
{
  ts = TIMESTAMP_WHITERABBIT(id=0x700);
  external data = EXT_AIDA();
}

SUBEVENT(bgo_tamex_subevent)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1900);
  }
  optional UINT32 be
  {
     0_31: b = MATCH(0xbad00bad);
  }
  select optional
  {
    trigger_window = TAMEX4_HEADER();
  }
  select several
  {
    padding = TAMEX4_PADDING();
  }
  select several
  {
    tamex[0] = TAMEX4_SFP(sfp=1,card=0);
    tamex[1] = TAMEX4_SFP(sfp=1,card=1);
    tamex[2] = TAMEX4_SFP(sfp=1,card=2);
  }
}

SUBEVENT(bm_subev)
{
  MEMBER(DATA32 dataS2[100000] NO_INDEX_LIST);
  MEMBER(DATA32 dataS4[100000] NO_INDEX_LIST);
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1700);
  }
  UINT32 headS2 NOENCODE
  {
     0_12: l_hit_ct;
    13_15: reserved;
    16_31: l_id = MATCH(0xaaaa);
  }
  list(0<=l_i<headS2.l_hit_ct)
  {
    UINT32 hit NOENCODE
    {
       0_31: data;
      ENCODE(dataS2 APPEND_LIST,(value=data));
    }
  }
  UINT32 headS4 NOENCODE
  {
     0_12: l_hit_ct;
    13_15: reserved;
    16_31: l_id = MATCH(0xbbbb);
  }
  list(0<=l_i<headS4.l_hit_ct)
  {
    UINT32 hit NOENCODE
    {
       0_31: data;
      ENCODE(dataS4 APPEND_LIST,(value=data));
    }
  }
  UINT32 trailer NOENCODE
  {
     0_15: reserved;
    16_31: l_id = MATCH(0xcccc);
  }
}

SUBEVENT(bplast_subev)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x500);
  }
  select optional
  {
    trigger_window = TAMEX4_HEADER();
  }
  select several
  {
    padding = TAMEX4_PADDING();
  }
  select several
  {
    tamex[0] = TAMEX4_SFP(sfp=0,card=0);
    tamex[1] = TAMEX4_SFP(sfp=0,card=1);
    tamex[2] = TAMEX4_SFP(sfp=0,card=2);
    tamex[3] = TAMEX4_SFP(sfp=0,card=3);
    tamex[4] = TAMEX4_SFP(sfp=0,card=4);
    tamex[5] = TAMEX4_SFP(sfp=0,card=5);
    tamex[6] = TAMEX4_SFP(sfp=0,card=6);
    tamex[7] = TAMEX4_SFP(sfp=0,card=7);
    tamex[8] = TAMEX4_SFP(sfp=0,card=8);
  }
}

SUBEVENT(fatima_tamex_subev)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1600);
  }
  select optional
  {
    trigger_window = TAMEX4_HEADER();
  }
  select several
  {
    padding = TAMEX4_PADDING();
  }
  select several
  {
    tamex[0] = TAMEX4_SFP(sfp=0,card=0);
    tamex[1] = TAMEX4_SFP(sfp=0,card=1);
    tamex[2] = TAMEX4_SFP(sfp=0,card=2);
    tamex[3] = TAMEX4_SFP(sfp=0,card=3);
  }
}

SUBEVENT(fatima_vme_subev)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1500);
  }
  select several
  {
    error1 = ERR_WORD_SIX();
  }
  select optional
  {
    scalers = FATIMA_VME_SCALERS();
  }
  select optional
  {
    qdc1 = VME_CAEN_V1751(board=6);
  }
  select optional
  {
    qdc2 = VME_CAEN_V1751(board=7);
  }
  select optional
  {
    qdc3 = VME_CAEN_V1751(board=8);
  }
  select optional
  {
    qdc4 = VME_CAEN_V1751(board=9);
  }
  select optional
  {
    qdc5 = VME_CAEN_V1751(board=10);
  }
  select several
  {
    error2 = ERR_WORD_SIX();
  }
  select optional
  {
    tdc1 = VME_CAEN_V1290_N();
  }
  select several
  {
    error3 = ERR_WORD_SIX();
  }
  select optional
  {
    tdc2 = VME_CAEN_V1290_N();
  }
}

SUBEVENT(febex_subev)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x400);
  }
  select several
  {
    padding = FEBEX_PADDING();
  }
  select several
  {
    data[0] = FEBEX_EVENT(card=0);
    data[1] = FEBEX_EVENT(card=1);
    data[2] = FEBEX_EVENT(card=2);
    data[3] = FEBEX_EVENT(card=3);
  }
}

SUBEVENT(frs_main_subev)
{
  select several
  {
    trig3 = TRIG3EVENT();
  }
  select several
  {
    spill_on = SPILL_ON();
  }
  select several
  {
    spill_off = SPILL_OFF();
  }
  select optional
  {
    data = MAIN_CRATE_DATA();
  }
}

SUBEVENT(frs_tpat_subev)
{
  select optional
  {
    wr = TIMESTAMP_WHITERABBIT(id=0x100);
  }
  select several
  {
    trig3 = TRIG3EVENT();
  }
  select optional
  {
    data = TPAT_CRATE_DATA();
  }
}

SUBEVENT(frs_tpc_subev)
{
  optional UINT32 be
  {
     0_31: b = MATCH(0xbad00bad);
  }
  select several
  {
    trig3 = TRIG3EVENT();
  }
  select several
  {
    spill_on = SPILL_ON();
  }
  select several
  {
    spill_off = SPILL_OFF();
  }
  select optional
  {
    data = TPC_CRATE_DATA();
  }
}

SUBEVENT(frs_user_subev)
{
  select several
  {
    trig3 = TRIG3EVENT();
  }
  select several
  {
    spill_on = SPILL_ON();
  }
  select several
  {
    spill_off = SPILL_OFF();
  }
  select optional
  {
    data = USER_CRATE_DATA();
  }
}

/**********************************************************
 * The event definition:
 */

EVENT
{
  revisit aida = aida_subev(type=10,subtype=1,procid=90,control=37);
  germanium = febex_subev(type=10,subtype=1,procid=60,control=20);
  fatima = fatima_tamex_subev(type=10,subtype=1,procid=75,control=20);
  fatimavme = fatima_vme_subev(type=10,subtype=1,procid=70,control=20);
  bplast = bplast_subev(type=10,subtype=1,procid=80,control=20);
  bgo = bgo_tamex_subevent(procid=100);
  frsmain = frs_main_subev(procid=10);
  frstpc = frs_tpc_subev(procid=20);
  frsuser = frs_user_subev(procid=30);
  frstpat = frs_tpat_subev(procid=15);
  beammonitor = bm_subev(procid=1);
  ignore_unknown_subevent;
}

/**********************************************************
 * The sticky_event definition:
 */

/**********************************************************
 * Signal name mappings:
 */

SIGNAL(MUSIC1E1,frsuser.data.v785[0].data[0],DATA24);
SIGNAL(MUSIC1E2,frsuser.data.v785[0].data[1],DATA24);
SIGNAL(MUSIC1E3,frsuser.data.v785[0].data[2],DATA24);
SIGNAL(MUSIC1E4,frsuser.data.v785[0].data[3],DATA24);
SIGNAL(MUSIC1E5,frsuser.data.v785[0].data[4],DATA24);
SIGNAL(MUSIC1E6,frsuser.data.v785[0].data[5],DATA24);
SIGNAL(MUSIC1E7,frsuser.data.v785[0].data[6],DATA24);
SIGNAL(MUSIC1E8,frsuser.data.v785[0].data[7],DATA24);
SIGNAL(MUSIC1LOT1,frsmain.data.v1290.measurement.leadOrTrail[16],DATA8);
SIGNAL(MUSIC1LOT2,frsmain.data.v1290.measurement.leadOrTrail[17],DATA8);
SIGNAL(MUSIC1LOT3,frsmain.data.v1290.measurement.leadOrTrail[18],DATA8);
SIGNAL(MUSIC1LOT4,frsmain.data.v1290.measurement.leadOrTrail[19],DATA8);
SIGNAL(MUSIC1LOT5,frsmain.data.v1290.measurement.leadOrTrail[20],DATA8);
SIGNAL(MUSIC1LOT6,frsmain.data.v1290.measurement.leadOrTrail[21],DATA8);
SIGNAL(MUSIC1LOT7,frsmain.data.v1290.measurement.leadOrTrail[22],DATA8);
SIGNAL(MUSIC1LOT8,frsmain.data.v1290.measurement.leadOrTrail[23],DATA8);
SIGNAL(MUSIC1T1,frsmain.data.v1290.measurement.data[16],DATA24);
SIGNAL(MUSIC1T2,frsmain.data.v1290.measurement.data[17],DATA24);
SIGNAL(MUSIC1T3,frsmain.data.v1290.measurement.data[18],DATA24);
SIGNAL(MUSIC1T4,frsmain.data.v1290.measurement.data[19],DATA24);
SIGNAL(MUSIC1T5,frsmain.data.v1290.measurement.data[20],DATA24);
SIGNAL(MUSIC1T6,frsmain.data.v1290.measurement.data[21],DATA24);
SIGNAL(MUSIC1T7,frsmain.data.v1290.measurement.data[22],DATA24);
SIGNAL(MUSIC1T8,frsmain.data.v1290.measurement.data[23],DATA24);
SIGNAL(MUSIC2E1,frsuser.data.v785[0].data[8],DATA24);
SIGNAL(MUSIC2E2,frsuser.data.v785[0].data[9],DATA24);
SIGNAL(MUSIC2E3,frsuser.data.v785[0].data[10],DATA24);
SIGNAL(MUSIC2E4,frsuser.data.v785[0].data[11],DATA24);
SIGNAL(MUSIC2E5,frsuser.data.v785[0].data[12],DATA24);
SIGNAL(MUSIC2E6,frsuser.data.v785[0].data[13],DATA24);
SIGNAL(MUSIC2E7,frsuser.data.v785[0].data[14],DATA24);
SIGNAL(MUSIC2E8,frsuser.data.v785[0].data[15],DATA24);
SIGNAL(MUSIC2LOT1,frsmain.data.v1290.measurement.leadOrTrail[24],DATA8);
SIGNAL(MUSIC2LOT2,frsmain.data.v1290.measurement.leadOrTrail[25],DATA8);
SIGNAL(MUSIC2LOT3,frsmain.data.v1290.measurement.leadOrTrail[26],DATA8);
SIGNAL(MUSIC2LOT4,frsmain.data.v1290.measurement.leadOrTrail[27],DATA8);
SIGNAL(MUSIC2LOT5,frsmain.data.v1290.measurement.leadOrTrail[28],DATA8);
SIGNAL(MUSIC2LOT6,frsmain.data.v1290.measurement.leadOrTrail[29],DATA8);
SIGNAL(MUSIC2LOT7,frsmain.data.v1290.measurement.leadOrTrail[30],DATA8);
SIGNAL(MUSIC2LOT8,frsmain.data.v1290.measurement.leadOrTrail[31],DATA8);
SIGNAL(MUSIC2T1,frsmain.data.v1290.measurement.data[24],DATA24);
SIGNAL(MUSIC2T2,frsmain.data.v1290.measurement.data[25],DATA24);
SIGNAL(MUSIC2T3,frsmain.data.v1290.measurement.data[26],DATA24);
SIGNAL(MUSIC2T4,frsmain.data.v1290.measurement.data[27],DATA24);
SIGNAL(MUSIC2T5,frsmain.data.v1290.measurement.data[28],DATA24);
SIGNAL(MUSIC2T6,frsmain.data.v1290.measurement.data[29],DATA24);
SIGNAL(MUSIC2T7,frsmain.data.v1290.measurement.data[30],DATA24);
SIGNAL(MUSIC2T8,frsmain.data.v1290.measurement.data[31],DATA24);
SIGNAL(SCALERS1_1,frsmain.data.v830.data[0],DATA32);
SIGNAL(SCALERS1_10,frsmain.data.v830.data[9],DATA32);
SIGNAL(SCALERS1_11,frsmain.data.v830.data[10],DATA32);
SIGNAL(SCALERS1_12,frsmain.data.v830.data[11],DATA32);
SIGNAL(SCALERS1_13,frsmain.data.v830.data[12],DATA32);
SIGNAL(SCALERS1_14,frsmain.data.v830.data[13],DATA32);
SIGNAL(SCALERS1_15,frsmain.data.v830.data[14],DATA32);
SIGNAL(SCALERS1_16,frsmain.data.v830.data[15],DATA32);
SIGNAL(SCALERS1_17,frsmain.data.v830.data[16],DATA32);
SIGNAL(SCALERS1_18,frsmain.data.v830.data[17],DATA32);
SIGNAL(SCALERS1_19,frsmain.data.v830.data[18],DATA32);
SIGNAL(SCALERS1_2,frsmain.data.v830.data[1],DATA32);
SIGNAL(SCALERS1_20,frsmain.data.v830.data[19],DATA32);
SIGNAL(SCALERS1_21,frsmain.data.v830.data[20],DATA32);
SIGNAL(SCALERS1_22,frsmain.data.v830.data[21],DATA32);
SIGNAL(SCALERS1_23,frsmain.data.v830.data[22],DATA32);
SIGNAL(SCALERS1_24,frsmain.data.v830.data[23],DATA32);
SIGNAL(SCALERS1_25,frsmain.data.v830.data[24],DATA32);
SIGNAL(SCALERS1_26,frsmain.data.v830.data[25],DATA32);
SIGNAL(SCALERS1_27,frsmain.data.v830.data[26],DATA32);
SIGNAL(SCALERS1_28,frsmain.data.v830.data[27],DATA32);
SIGNAL(SCALERS1_29,frsmain.data.v830.data[28],DATA32);
SIGNAL(SCALERS1_3,frsmain.data.v830.data[2],DATA32);
SIGNAL(SCALERS1_30,frsmain.data.v830.data[29],DATA32);
SIGNAL(SCALERS1_31,frsmain.data.v830.data[30],DATA32);
SIGNAL(SCALERS1_32,frsmain.data.v830.data[31],DATA32);
SIGNAL(SCALERS1_4,frsmain.data.v830.data[3],DATA32);
SIGNAL(SCALERS1_5,frsmain.data.v830.data[4],DATA32);
SIGNAL(SCALERS1_6,frsmain.data.v830.data[5],DATA32);
SIGNAL(SCALERS1_7,frsmain.data.v830.data[6],DATA32);
SIGNAL(SCALERS1_8,frsmain.data.v830.data[7],DATA32);
SIGNAL(SCALERS1_9,frsmain.data.v830.data[8],DATA32);
SIGNAL(SCALERS2_1,frsuser.data.v830.data[0],DATA32);
SIGNAL(SCALERS2_10,frsuser.data.v830.data[9],DATA32);
SIGNAL(SCALERS2_11,frsuser.data.v830.data[10],DATA32);
SIGNAL(SCALERS2_12,frsuser.data.v830.data[11],DATA32);
SIGNAL(SCALERS2_13,frsuser.data.v830.data[12],DATA32);
SIGNAL(SCALERS2_14,frsuser.data.v830.data[13],DATA32);
SIGNAL(SCALERS2_15,frsuser.data.v830.data[14],DATA32);
SIGNAL(SCALERS2_16,frsuser.data.v830.data[15],DATA32);
SIGNAL(SCALERS2_17,frsuser.data.v830.data[16],DATA32);
SIGNAL(SCALERS2_18,frsuser.data.v830.data[17],DATA32);
SIGNAL(SCALERS2_19,frsuser.data.v830.data[18],DATA32);
SIGNAL(SCALERS2_2,frsuser.data.v830.data[1],DATA32);
SIGNAL(SCALERS2_20,frsuser.data.v830.data[19],DATA32);
SIGNAL(SCALERS2_21,frsuser.data.v830.data[20],DATA32);
SIGNAL(SCALERS2_22,frsuser.data.v830.data[21],DATA32);
SIGNAL(SCALERS2_23,frsuser.data.v830.data[22],DATA32);
SIGNAL(SCALERS2_24,frsuser.data.v830.data[23],DATA32);
SIGNAL(SCALERS2_25,frsuser.data.v830.data[24],DATA32);
SIGNAL(SCALERS2_26,frsuser.data.v830.data[25],DATA32);
SIGNAL(SCALERS2_27,frsuser.data.v830.data[26],DATA32);
SIGNAL(SCALERS2_28,frsuser.data.v830.data[27],DATA32);
SIGNAL(SCALERS2_29,frsuser.data.v830.data[28],DATA32);
SIGNAL(SCALERS2_3,frsuser.data.v830.data[2],DATA32);
SIGNAL(SCALERS2_30,frsuser.data.v830.data[29],DATA32);
SIGNAL(SCALERS2_31,frsuser.data.v830.data[30],DATA32);
SIGNAL(SCALERS2_32,frsuser.data.v830.data[31],DATA32);
SIGNAL(SCALERS2_4,frsuser.data.v830.data[3],DATA32);
SIGNAL(SCALERS2_5,frsuser.data.v830.data[4],DATA32);
SIGNAL(SCALERS2_6,frsuser.data.v830.data[5],DATA32);
SIGNAL(SCALERS2_7,frsuser.data.v830.data[6],DATA32);
SIGNAL(SCALERS2_8,frsuser.data.v830.data[7],DATA32);
SIGNAL(SCALERS2_9,frsuser.data.v830.data[8],DATA32);
SIGNAL(SCI_MHTDC_LOT1,frsmain.data.v1290.measurement.leadOrTrail[0],DATA8);
SIGNAL(SCI_MHTDC_LOT10,frsmain.data.v1290.measurement.leadOrTrail[9],DATA8);
SIGNAL(SCI_MHTDC_LOT11,frsmain.data.v1290.measurement.leadOrTrail[10],DATA8);
SIGNAL(SCI_MHTDC_LOT12,frsmain.data.v1290.measurement.leadOrTrail[11],DATA8);
SIGNAL(SCI_MHTDC_LOT13,frsmain.data.v1290.measurement.leadOrTrail[12],DATA8);
SIGNAL(SCI_MHTDC_LOT14,frsmain.data.v1290.measurement.leadOrTrail[13],DATA8);
SIGNAL(SCI_MHTDC_LOT15,frsmain.data.v1290.measurement.leadOrTrail[14],DATA8);
SIGNAL(SCI_MHTDC_LOT16,frsmain.data.v1290.measurement.leadOrTrail[15],DATA8);
SIGNAL(SCI_MHTDC_LOT2,frsmain.data.v1290.measurement.leadOrTrail[1],DATA8);
SIGNAL(SCI_MHTDC_LOT3,frsmain.data.v1290.measurement.leadOrTrail[2],DATA8);
SIGNAL(SCI_MHTDC_LOT4,frsmain.data.v1290.measurement.leadOrTrail[3],DATA8);
SIGNAL(SCI_MHTDC_LOT5,frsmain.data.v1290.measurement.leadOrTrail[4],DATA8);
SIGNAL(SCI_MHTDC_LOT6,frsmain.data.v1290.measurement.leadOrTrail[5],DATA8);
SIGNAL(SCI_MHTDC_LOT7,frsmain.data.v1290.measurement.leadOrTrail[6],DATA8);
SIGNAL(SCI_MHTDC_LOT8,frsmain.data.v1290.measurement.leadOrTrail[7],DATA8);
SIGNAL(SCI_MHTDC_LOT9,frsmain.data.v1290.measurement.leadOrTrail[8],DATA8);
SIGNAL(SCI_MHTDC_T1,frsmain.data.v1290.measurement.data[0],DATA24);
SIGNAL(SCI_MHTDC_T10,frsmain.data.v1290.measurement.data[9],DATA24);
SIGNAL(SCI_MHTDC_T11,frsmain.data.v1290.measurement.data[10],DATA24);
SIGNAL(SCI_MHTDC_T12,frsmain.data.v1290.measurement.data[11],DATA24);
SIGNAL(SCI_MHTDC_T13,frsmain.data.v1290.measurement.data[12],DATA24);
SIGNAL(SCI_MHTDC_T14,frsmain.data.v1290.measurement.data[13],DATA24);
SIGNAL(SCI_MHTDC_T15,frsmain.data.v1290.measurement.data[14],DATA24);
SIGNAL(SCI_MHTDC_T16,frsmain.data.v1290.measurement.data[15],DATA24);
SIGNAL(SCI_MHTDC_T2,frsmain.data.v1290.measurement.data[1],DATA24);
SIGNAL(SCI_MHTDC_T3,frsmain.data.v1290.measurement.data[2],DATA24);
SIGNAL(SCI_MHTDC_T4,frsmain.data.v1290.measurement.data[3],DATA24);
SIGNAL(SCI_MHTDC_T5,frsmain.data.v1290.measurement.data[4],DATA24);
SIGNAL(SCI_MHTDC_T6,frsmain.data.v1290.measurement.data[5],DATA24);
SIGNAL(SCI_MHTDC_T7,frsmain.data.v1290.measurement.data[6],DATA24);
SIGNAL(SCI_MHTDC_T8,frsmain.data.v1290.measurement.data[7],DATA24);
SIGNAL(SCI_MHTDC_T9,frsmain.data.v1290.measurement.data[8],DATA24);
SIGNAL(SCI_TAC_DE1,frsmain.data.v792.data[0],DATA24);
SIGNAL(SCI_TAC_DE10,frsmain.data.v792.data[9],DATA24);
SIGNAL(SCI_TAC_DE11,frsmain.data.v792.data[10],DATA24);
SIGNAL(SCI_TAC_DE12,frsmain.data.v792.data[11],DATA24);
SIGNAL(SCI_TAC_DE13,frsmain.data.v792.data[12],DATA24);
SIGNAL(SCI_TAC_DE14,frsmain.data.v792.data[13],DATA24);
SIGNAL(SCI_TAC_DE15,frsmain.data.v792.data[14],DATA24);
SIGNAL(SCI_TAC_DE16,frsmain.data.v792.data[15],DATA24);
SIGNAL(SCI_TAC_DE2,frsmain.data.v792.data[1],DATA24);
SIGNAL(SCI_TAC_DE3,frsmain.data.v792.data[2],DATA24);
SIGNAL(SCI_TAC_DE4,frsmain.data.v792.data[3],DATA24);
SIGNAL(SCI_TAC_DE5,frsmain.data.v792.data[4],DATA24);
SIGNAL(SCI_TAC_DE6,frsmain.data.v792.data[5],DATA24);
SIGNAL(SCI_TAC_DE7,frsmain.data.v792.data[6],DATA24);
SIGNAL(SCI_TAC_DE8,frsmain.data.v792.data[7],DATA24);
SIGNAL(SCI_TAC_DE9,frsmain.data.v792.data[8],DATA24);
SIGNAL(SCI_TAC_DT1,frsuser.data.v785[1].data[0],DATA24);
SIGNAL(SCI_TAC_DT10,frsuser.data.v785[1].data[9],DATA24);
SIGNAL(SCI_TAC_DT11,frsuser.data.v785[1].data[10],DATA24);
SIGNAL(SCI_TAC_DT12,frsuser.data.v785[1].data[11],DATA24);
SIGNAL(SCI_TAC_DT13,frsuser.data.v785[1].data[12],DATA24);
SIGNAL(SCI_TAC_DT14,frsuser.data.v785[1].data[13],DATA24);
SIGNAL(SCI_TAC_DT15,frsuser.data.v785[1].data[14],DATA24);
SIGNAL(SCI_TAC_DT16,frsuser.data.v785[1].data[15],DATA24);
SIGNAL(SCI_TAC_DT2,frsuser.data.v785[1].data[1],DATA24);
SIGNAL(SCI_TAC_DT3,frsuser.data.v785[1].data[2],DATA24);
SIGNAL(SCI_TAC_DT4,frsuser.data.v785[1].data[3],DATA24);
SIGNAL(SCI_TAC_DT5,frsuser.data.v785[1].data[4],DATA24);
SIGNAL(SCI_TAC_DT6,frsuser.data.v785[1].data[5],DATA24);
SIGNAL(SCI_TAC_DT7,frsuser.data.v785[1].data[6],DATA24);
SIGNAL(SCI_TAC_DT8,frsuser.data.v785[1].data[7],DATA24);
SIGNAL(SCI_TAC_DT9,frsuser.data.v785[1].data[8],DATA24);
SIGNAL(SPILL_OFF,frsmain.spill_off.spilloff,DATA8);
SIGNAL(SPILL_ON,frsmain.spill_on.spillon,DATA8);
SIGNAL(TPAT,frstpat.data.tpat,DATA16);
SIGNAL(TPC_ADC1_1,frstpc.data.v775.data[0],DATA24);
SIGNAL(TPC_ADC1_2,frstpc.data.v775.data[1],DATA24);
SIGNAL(TPC_ADC1_3,frstpc.data.v775.data[2],DATA24);
SIGNAL(TPC_ADC1_4,frstpc.data.v775.data[3],DATA24);
SIGNAL(TPC_ADC1_5,frstpc.data.v775.data[4],DATA24);
SIGNAL(TPC_ADC1_6,frstpc.data.v775.data[5],DATA24);
SIGNAL(TPC_ADC1_7,frstpc.data.v775.data[6],DATA24);
SIGNAL(TPC_ADC1_8,frstpc.data.v775.data[7],DATA24);
SIGNAL(TPC_ADC2_1,frstpc.data.v775.data[8],DATA24);
SIGNAL(TPC_ADC2_2,frstpc.data.v775.data[9],DATA24);
SIGNAL(TPC_ADC2_3,frstpc.data.v775.data[10],DATA24);
SIGNAL(TPC_ADC2_4,frstpc.data.v775.data[11],DATA24);
SIGNAL(TPC_ADC2_5,frstpc.data.v775.data[12],DATA24);
SIGNAL(TPC_ADC2_6,frstpc.data.v775.data[13],DATA24);
SIGNAL(TPC_ADC2_7,frstpc.data.v775.data[14],DATA24);
SIGNAL(TPC_ADC2_8,frstpc.data.v775.data[15],DATA24);
SIGNAL(TPC_ADC3_1,frstpc.data.v775.data[16],DATA24);
SIGNAL(TPC_ADC3_2,frstpc.data.v775.data[17],DATA24);
SIGNAL(TPC_ADC3_3,frstpc.data.v775.data[18],DATA24);
SIGNAL(TPC_ADC3_4,frstpc.data.v775.data[19],DATA24);
SIGNAL(TPC_ADC3_5,frstpc.data.v775.data[20],DATA24);
SIGNAL(TPC_ADC3_6,frstpc.data.v775.data[21],DATA24);
SIGNAL(TPC_ADC3_7,frstpc.data.v775.data[22],DATA24);
SIGNAL(TPC_ADC3_8,frstpc.data.v775.data[23],DATA24);
SIGNAL(TPC_ADC4_1,frstpc.data.v775.data[24],DATA24);
SIGNAL(TPC_ADC4_2,frstpc.data.v775.data[25],DATA24);
SIGNAL(TPC_ADC4_3,frstpc.data.v775.data[26],DATA24);
SIGNAL(TPC_ADC4_4,frstpc.data.v775.data[27],DATA24);
SIGNAL(TPC_ADC4_5,frstpc.data.v775.data[28],DATA24);
SIGNAL(TPC_ADC4_6,frstpc.data.v775.data[29],DATA24);
SIGNAL(TPC_ADC4_7,frstpc.data.v775.data[30],DATA24);
SIGNAL(TPC_ADC4_8,frstpc.data.v775.data[31],DATA24);
SIGNAL(TPC_ADC5_1,frstpc.data.v785.data[0],DATA24);
SIGNAL(TPC_ADC5_2,frstpc.data.v785.data[1],DATA24);
SIGNAL(TPC_ADC5_3,frstpc.data.v785.data[2],DATA24);
SIGNAL(TPC_ADC5_4,frstpc.data.v785.data[3],DATA24);
SIGNAL(TPC_ADC5_5,frstpc.data.v785.data[4],DATA24);
SIGNAL(TPC_ADC5_6,frstpc.data.v785.data[5],DATA24);
SIGNAL(TPC_ADC5_7,frstpc.data.v785.data[6],DATA24);
SIGNAL(TPC_ADC5_8,frstpc.data.v785.data[7],DATA24);
SIGNAL(TPC_ADC6_1,frstpc.data.v785.data[8],DATA24);
SIGNAL(TPC_ADC6_2,frstpc.data.v785.data[9],DATA24);
SIGNAL(TPC_ADC6_3,frstpc.data.v785.data[10],DATA24);
SIGNAL(TPC_ADC6_4,frstpc.data.v785.data[11],DATA24);
SIGNAL(TPC_ADC6_5,frstpc.data.v785.data[12],DATA24);
SIGNAL(TPC_ADC6_6,frstpc.data.v785.data[13],DATA24);
SIGNAL(TPC_ADC6_7,frstpc.data.v785.data[14],DATA24);
SIGNAL(TPC_ADC6_8,frstpc.data.v785.data[15],DATA24);
SIGNAL(TPC_ADC7_1,frstpc.data.v785.data[16],DATA24);
SIGNAL(TPC_ADC7_2,frstpc.data.v785.data[17],DATA24);
SIGNAL(TPC_ADC7_3,frstpc.data.v785.data[18],DATA24);
SIGNAL(TPC_ADC7_4,frstpc.data.v785.data[19],DATA24);
SIGNAL(TPC_ADC7_5,frstpc.data.v785.data[20],DATA24);
SIGNAL(TPC_ADC7_6,frstpc.data.v785.data[21],DATA24);
SIGNAL(TPC_ADC7_7,frstpc.data.v785.data[22],DATA24);
SIGNAL(TPC_ADC7_8,frstpc.data.v785.data[23],DATA24);
SIGNAL(TPC_TDC_LOT1,frstpc.data.v1190.measurement.leadOrTrail[0],DATA8);
SIGNAL(TPC_TDC_LOT10,frstpc.data.v1190.measurement.leadOrTrail[9],DATA8);
SIGNAL(TPC_TDC_LOT100,frstpc.data.v1190.measurement.leadOrTrail[99],DATA8);
SIGNAL(TPC_TDC_LOT101,frstpc.data.v1190.measurement.leadOrTrail[100],DATA8);
SIGNAL(TPC_TDC_LOT102,frstpc.data.v1190.measurement.leadOrTrail[101],DATA8);
SIGNAL(TPC_TDC_LOT103,frstpc.data.v1190.measurement.leadOrTrail[102],DATA8);
SIGNAL(TPC_TDC_LOT104,frstpc.data.v1190.measurement.leadOrTrail[103],DATA8);
SIGNAL(TPC_TDC_LOT105,frstpc.data.v1190.measurement.leadOrTrail[104],DATA8);
SIGNAL(TPC_TDC_LOT106,frstpc.data.v1190.measurement.leadOrTrail[105],DATA8);
SIGNAL(TPC_TDC_LOT107,frstpc.data.v1190.measurement.leadOrTrail[106],DATA8);
SIGNAL(TPC_TDC_LOT108,frstpc.data.v1190.measurement.leadOrTrail[107],DATA8);
SIGNAL(TPC_TDC_LOT109,frstpc.data.v1190.measurement.leadOrTrail[108],DATA8);
SIGNAL(TPC_TDC_LOT11,frstpc.data.v1190.measurement.leadOrTrail[10],DATA8);
SIGNAL(TPC_TDC_LOT110,frstpc.data.v1190.measurement.leadOrTrail[109],DATA8);
SIGNAL(TPC_TDC_LOT111,frstpc.data.v1190.measurement.leadOrTrail[110],DATA8);
SIGNAL(TPC_TDC_LOT112,frstpc.data.v1190.measurement.leadOrTrail[111],DATA8);
SIGNAL(TPC_TDC_LOT113,frstpc.data.v1190.measurement.leadOrTrail[112],DATA8);
SIGNAL(TPC_TDC_LOT114,frstpc.data.v1190.measurement.leadOrTrail[113],DATA8);
SIGNAL(TPC_TDC_LOT115,frstpc.data.v1190.measurement.leadOrTrail[114],DATA8);
SIGNAL(TPC_TDC_LOT116,frstpc.data.v1190.measurement.leadOrTrail[115],DATA8);
SIGNAL(TPC_TDC_LOT117,frstpc.data.v1190.measurement.leadOrTrail[116],DATA8);
SIGNAL(TPC_TDC_LOT118,frstpc.data.v1190.measurement.leadOrTrail[117],DATA8);
SIGNAL(TPC_TDC_LOT119,frstpc.data.v1190.measurement.leadOrTrail[118],DATA8);
SIGNAL(TPC_TDC_LOT12,frstpc.data.v1190.measurement.leadOrTrail[11],DATA8);
SIGNAL(TPC_TDC_LOT120,frstpc.data.v1190.measurement.leadOrTrail[119],DATA8);
SIGNAL(TPC_TDC_LOT121,frstpc.data.v1190.measurement.leadOrTrail[120],DATA8);
SIGNAL(TPC_TDC_LOT122,frstpc.data.v1190.measurement.leadOrTrail[121],DATA8);
SIGNAL(TPC_TDC_LOT123,frstpc.data.v1190.measurement.leadOrTrail[122],DATA8);
SIGNAL(TPC_TDC_LOT124,frstpc.data.v1190.measurement.leadOrTrail[123],DATA8);
SIGNAL(TPC_TDC_LOT125,frstpc.data.v1190.measurement.leadOrTrail[124],DATA8);
SIGNAL(TPC_TDC_LOT126,frstpc.data.v1190.measurement.leadOrTrail[125],DATA8);
SIGNAL(TPC_TDC_LOT127,frstpc.data.v1190.measurement.leadOrTrail[126],DATA8);
SIGNAL(TPC_TDC_LOT128,frstpc.data.v1190.measurement.leadOrTrail[127],DATA8);
SIGNAL(TPC_TDC_LOT13,frstpc.data.v1190.measurement.leadOrTrail[12],DATA8);
SIGNAL(TPC_TDC_LOT14,frstpc.data.v1190.measurement.leadOrTrail[13],DATA8);
SIGNAL(TPC_TDC_LOT15,frstpc.data.v1190.measurement.leadOrTrail[14],DATA8);
SIGNAL(TPC_TDC_LOT16,frstpc.data.v1190.measurement.leadOrTrail[15],DATA8);
SIGNAL(TPC_TDC_LOT17,frstpc.data.v1190.measurement.leadOrTrail[16],DATA8);
SIGNAL(TPC_TDC_LOT18,frstpc.data.v1190.measurement.leadOrTrail[17],DATA8);
SIGNAL(TPC_TDC_LOT19,frstpc.data.v1190.measurement.leadOrTrail[18],DATA8);
SIGNAL(TPC_TDC_LOT2,frstpc.data.v1190.measurement.leadOrTrail[1],DATA8);
SIGNAL(TPC_TDC_LOT20,frstpc.data.v1190.measurement.leadOrTrail[19],DATA8);
SIGNAL(TPC_TDC_LOT21,frstpc.data.v1190.measurement.leadOrTrail[20],DATA8);
SIGNAL(TPC_TDC_LOT22,frstpc.data.v1190.measurement.leadOrTrail[21],DATA8);
SIGNAL(TPC_TDC_LOT23,frstpc.data.v1190.measurement.leadOrTrail[22],DATA8);
SIGNAL(TPC_TDC_LOT24,frstpc.data.v1190.measurement.leadOrTrail[23],DATA8);
SIGNAL(TPC_TDC_LOT25,frstpc.data.v1190.measurement.leadOrTrail[24],DATA8);
SIGNAL(TPC_TDC_LOT26,frstpc.data.v1190.measurement.leadOrTrail[25],DATA8);
SIGNAL(TPC_TDC_LOT27,frstpc.data.v1190.measurement.leadOrTrail[26],DATA8);
SIGNAL(TPC_TDC_LOT28,frstpc.data.v1190.measurement.leadOrTrail[27],DATA8);
SIGNAL(TPC_TDC_LOT29,frstpc.data.v1190.measurement.leadOrTrail[28],DATA8);
SIGNAL(TPC_TDC_LOT3,frstpc.data.v1190.measurement.leadOrTrail[2],DATA8);
SIGNAL(TPC_TDC_LOT30,frstpc.data.v1190.measurement.leadOrTrail[29],DATA8);
SIGNAL(TPC_TDC_LOT31,frstpc.data.v1190.measurement.leadOrTrail[30],DATA8);
SIGNAL(TPC_TDC_LOT32,frstpc.data.v1190.measurement.leadOrTrail[31],DATA8);
SIGNAL(TPC_TDC_LOT33,frstpc.data.v1190.measurement.leadOrTrail[32],DATA8);
SIGNAL(TPC_TDC_LOT34,frstpc.data.v1190.measurement.leadOrTrail[33],DATA8);
SIGNAL(TPC_TDC_LOT35,frstpc.data.v1190.measurement.leadOrTrail[34],DATA8);
SIGNAL(TPC_TDC_LOT36,frstpc.data.v1190.measurement.leadOrTrail[35],DATA8);
SIGNAL(TPC_TDC_LOT37,frstpc.data.v1190.measurement.leadOrTrail[36],DATA8);
SIGNAL(TPC_TDC_LOT38,frstpc.data.v1190.measurement.leadOrTrail[37],DATA8);
SIGNAL(TPC_TDC_LOT39,frstpc.data.v1190.measurement.leadOrTrail[38],DATA8);
SIGNAL(TPC_TDC_LOT4,frstpc.data.v1190.measurement.leadOrTrail[3],DATA8);
SIGNAL(TPC_TDC_LOT40,frstpc.data.v1190.measurement.leadOrTrail[39],DATA8);
SIGNAL(TPC_TDC_LOT41,frstpc.data.v1190.measurement.leadOrTrail[40],DATA8);
SIGNAL(TPC_TDC_LOT42,frstpc.data.v1190.measurement.leadOrTrail[41],DATA8);
SIGNAL(TPC_TDC_LOT43,frstpc.data.v1190.measurement.leadOrTrail[42],DATA8);
SIGNAL(TPC_TDC_LOT44,frstpc.data.v1190.measurement.leadOrTrail[43],DATA8);
SIGNAL(TPC_TDC_LOT45,frstpc.data.v1190.measurement.leadOrTrail[44],DATA8);
SIGNAL(TPC_TDC_LOT46,frstpc.data.v1190.measurement.leadOrTrail[45],DATA8);
SIGNAL(TPC_TDC_LOT47,frstpc.data.v1190.measurement.leadOrTrail[46],DATA8);
SIGNAL(TPC_TDC_LOT48,frstpc.data.v1190.measurement.leadOrTrail[47],DATA8);
SIGNAL(TPC_TDC_LOT49,frstpc.data.v1190.measurement.leadOrTrail[48],DATA8);
SIGNAL(TPC_TDC_LOT5,frstpc.data.v1190.measurement.leadOrTrail[4],DATA8);
SIGNAL(TPC_TDC_LOT50,frstpc.data.v1190.measurement.leadOrTrail[49],DATA8);
SIGNAL(TPC_TDC_LOT51,frstpc.data.v1190.measurement.leadOrTrail[50],DATA8);
SIGNAL(TPC_TDC_LOT52,frstpc.data.v1190.measurement.leadOrTrail[51],DATA8);
SIGNAL(TPC_TDC_LOT53,frstpc.data.v1190.measurement.leadOrTrail[52],DATA8);
SIGNAL(TPC_TDC_LOT54,frstpc.data.v1190.measurement.leadOrTrail[53],DATA8);
SIGNAL(TPC_TDC_LOT55,frstpc.data.v1190.measurement.leadOrTrail[54],DATA8);
SIGNAL(TPC_TDC_LOT56,frstpc.data.v1190.measurement.leadOrTrail[55],DATA8);
SIGNAL(TPC_TDC_LOT57,frstpc.data.v1190.measurement.leadOrTrail[56],DATA8);
SIGNAL(TPC_TDC_LOT58,frstpc.data.v1190.measurement.leadOrTrail[57],DATA8);
SIGNAL(TPC_TDC_LOT59,frstpc.data.v1190.measurement.leadOrTrail[58],DATA8);
SIGNAL(TPC_TDC_LOT6,frstpc.data.v1190.measurement.leadOrTrail[5],DATA8);
SIGNAL(TPC_TDC_LOT60,frstpc.data.v1190.measurement.leadOrTrail[59],DATA8);
SIGNAL(TPC_TDC_LOT61,frstpc.data.v1190.measurement.leadOrTrail[60],DATA8);
SIGNAL(TPC_TDC_LOT62,frstpc.data.v1190.measurement.leadOrTrail[61],DATA8);
SIGNAL(TPC_TDC_LOT63,frstpc.data.v1190.measurement.leadOrTrail[62],DATA8);
SIGNAL(TPC_TDC_LOT64,frstpc.data.v1190.measurement.leadOrTrail[63],DATA8);
SIGNAL(TPC_TDC_LOT65,frstpc.data.v1190.measurement.leadOrTrail[64],DATA8);
SIGNAL(TPC_TDC_LOT66,frstpc.data.v1190.measurement.leadOrTrail[65],DATA8);
SIGNAL(TPC_TDC_LOT67,frstpc.data.v1190.measurement.leadOrTrail[66],DATA8);
SIGNAL(TPC_TDC_LOT68,frstpc.data.v1190.measurement.leadOrTrail[67],DATA8);
SIGNAL(TPC_TDC_LOT69,frstpc.data.v1190.measurement.leadOrTrail[68],DATA8);
SIGNAL(TPC_TDC_LOT7,frstpc.data.v1190.measurement.leadOrTrail[6],DATA8);
SIGNAL(TPC_TDC_LOT70,frstpc.data.v1190.measurement.leadOrTrail[69],DATA8);
SIGNAL(TPC_TDC_LOT71,frstpc.data.v1190.measurement.leadOrTrail[70],DATA8);
SIGNAL(TPC_TDC_LOT72,frstpc.data.v1190.measurement.leadOrTrail[71],DATA8);
SIGNAL(TPC_TDC_LOT73,frstpc.data.v1190.measurement.leadOrTrail[72],DATA8);
SIGNAL(TPC_TDC_LOT74,frstpc.data.v1190.measurement.leadOrTrail[73],DATA8);
SIGNAL(TPC_TDC_LOT75,frstpc.data.v1190.measurement.leadOrTrail[74],DATA8);
SIGNAL(TPC_TDC_LOT76,frstpc.data.v1190.measurement.leadOrTrail[75],DATA8);
SIGNAL(TPC_TDC_LOT77,frstpc.data.v1190.measurement.leadOrTrail[76],DATA8);
SIGNAL(TPC_TDC_LOT78,frstpc.data.v1190.measurement.leadOrTrail[77],DATA8);
SIGNAL(TPC_TDC_LOT79,frstpc.data.v1190.measurement.leadOrTrail[78],DATA8);
SIGNAL(TPC_TDC_LOT8,frstpc.data.v1190.measurement.leadOrTrail[7],DATA8);
SIGNAL(TPC_TDC_LOT80,frstpc.data.v1190.measurement.leadOrTrail[79],DATA8);
SIGNAL(TPC_TDC_LOT81,frstpc.data.v1190.measurement.leadOrTrail[80],DATA8);
SIGNAL(TPC_TDC_LOT82,frstpc.data.v1190.measurement.leadOrTrail[81],DATA8);
SIGNAL(TPC_TDC_LOT83,frstpc.data.v1190.measurement.leadOrTrail[82],DATA8);
SIGNAL(TPC_TDC_LOT84,frstpc.data.v1190.measurement.leadOrTrail[83],DATA8);
SIGNAL(TPC_TDC_LOT85,frstpc.data.v1190.measurement.leadOrTrail[84],DATA8);
SIGNAL(TPC_TDC_LOT86,frstpc.data.v1190.measurement.leadOrTrail[85],DATA8);
SIGNAL(TPC_TDC_LOT87,frstpc.data.v1190.measurement.leadOrTrail[86],DATA8);
SIGNAL(TPC_TDC_LOT88,frstpc.data.v1190.measurement.leadOrTrail[87],DATA8);
SIGNAL(TPC_TDC_LOT89,frstpc.data.v1190.measurement.leadOrTrail[88],DATA8);
SIGNAL(TPC_TDC_LOT9,frstpc.data.v1190.measurement.leadOrTrail[8],DATA8);
SIGNAL(TPC_TDC_LOT90,frstpc.data.v1190.measurement.leadOrTrail[89],DATA8);
SIGNAL(TPC_TDC_LOT91,frstpc.data.v1190.measurement.leadOrTrail[90],DATA8);
SIGNAL(TPC_TDC_LOT92,frstpc.data.v1190.measurement.leadOrTrail[91],DATA8);
SIGNAL(TPC_TDC_LOT93,frstpc.data.v1190.measurement.leadOrTrail[92],DATA8);
SIGNAL(TPC_TDC_LOT94,frstpc.data.v1190.measurement.leadOrTrail[93],DATA8);
SIGNAL(TPC_TDC_LOT95,frstpc.data.v1190.measurement.leadOrTrail[94],DATA8);
SIGNAL(TPC_TDC_LOT96,frstpc.data.v1190.measurement.leadOrTrail[95],DATA8);
SIGNAL(TPC_TDC_LOT97,frstpc.data.v1190.measurement.leadOrTrail[96],DATA8);
SIGNAL(TPC_TDC_LOT98,frstpc.data.v1190.measurement.leadOrTrail[97],DATA8);
SIGNAL(TPC_TDC_LOT99,frstpc.data.v1190.measurement.leadOrTrail[98],DATA8);
SIGNAL(TPC_TDC_T1,frstpc.data.v1190.measurement.data[0],DATA24);
SIGNAL(TPC_TDC_T10,frstpc.data.v1190.measurement.data[9],DATA24);
SIGNAL(TPC_TDC_T100,frstpc.data.v1190.measurement.data[99],DATA24);
SIGNAL(TPC_TDC_T101,frstpc.data.v1190.measurement.data[100],DATA24);
SIGNAL(TPC_TDC_T102,frstpc.data.v1190.measurement.data[101],DATA24);
SIGNAL(TPC_TDC_T103,frstpc.data.v1190.measurement.data[102],DATA24);
SIGNAL(TPC_TDC_T104,frstpc.data.v1190.measurement.data[103],DATA24);
SIGNAL(TPC_TDC_T105,frstpc.data.v1190.measurement.data[104],DATA24);
SIGNAL(TPC_TDC_T106,frstpc.data.v1190.measurement.data[105],DATA24);
SIGNAL(TPC_TDC_T107,frstpc.data.v1190.measurement.data[106],DATA24);
SIGNAL(TPC_TDC_T108,frstpc.data.v1190.measurement.data[107],DATA24);
SIGNAL(TPC_TDC_T109,frstpc.data.v1190.measurement.data[108],DATA24);
SIGNAL(TPC_TDC_T11,frstpc.data.v1190.measurement.data[10],DATA24);
SIGNAL(TPC_TDC_T110,frstpc.data.v1190.measurement.data[109],DATA24);
SIGNAL(TPC_TDC_T111,frstpc.data.v1190.measurement.data[110],DATA24);
SIGNAL(TPC_TDC_T112,frstpc.data.v1190.measurement.data[111],DATA24);
SIGNAL(TPC_TDC_T113,frstpc.data.v1190.measurement.data[112],DATA24);
SIGNAL(TPC_TDC_T114,frstpc.data.v1190.measurement.data[113],DATA24);
SIGNAL(TPC_TDC_T115,frstpc.data.v1190.measurement.data[114],DATA24);
SIGNAL(TPC_TDC_T116,frstpc.data.v1190.measurement.data[115],DATA24);
SIGNAL(TPC_TDC_T117,frstpc.data.v1190.measurement.data[116],DATA24);
SIGNAL(TPC_TDC_T118,frstpc.data.v1190.measurement.data[117],DATA24);
SIGNAL(TPC_TDC_T119,frstpc.data.v1190.measurement.data[118],DATA24);
SIGNAL(TPC_TDC_T12,frstpc.data.v1190.measurement.data[11],DATA24);
SIGNAL(TPC_TDC_T120,frstpc.data.v1190.measurement.data[119],DATA24);
SIGNAL(TPC_TDC_T121,frstpc.data.v1190.measurement.data[120],DATA24);
SIGNAL(TPC_TDC_T122,frstpc.data.v1190.measurement.data[121],DATA24);
SIGNAL(TPC_TDC_T123,frstpc.data.v1190.measurement.data[122],DATA24);
SIGNAL(TPC_TDC_T124,frstpc.data.v1190.measurement.data[123],DATA24);
SIGNAL(TPC_TDC_T125,frstpc.data.v1190.measurement.data[124],DATA24);
SIGNAL(TPC_TDC_T126,frstpc.data.v1190.measurement.data[125],DATA24);
SIGNAL(TPC_TDC_T127,frstpc.data.v1190.measurement.data[126],DATA24);
SIGNAL(TPC_TDC_T128,frstpc.data.v1190.measurement.data[127],DATA24);
SIGNAL(TPC_TDC_T13,frstpc.data.v1190.measurement.data[12],DATA24);
SIGNAL(TPC_TDC_T14,frstpc.data.v1190.measurement.data[13],DATA24);
SIGNAL(TPC_TDC_T15,frstpc.data.v1190.measurement.data[14],DATA24);
SIGNAL(TPC_TDC_T16,frstpc.data.v1190.measurement.data[15],DATA24);
SIGNAL(TPC_TDC_T17,frstpc.data.v1190.measurement.data[16],DATA24);
SIGNAL(TPC_TDC_T18,frstpc.data.v1190.measurement.data[17],DATA24);
SIGNAL(TPC_TDC_T19,frstpc.data.v1190.measurement.data[18],DATA24);
SIGNAL(TPC_TDC_T2,frstpc.data.v1190.measurement.data[1],DATA24);
SIGNAL(TPC_TDC_T20,frstpc.data.v1190.measurement.data[19],DATA24);
SIGNAL(TPC_TDC_T21,frstpc.data.v1190.measurement.data[20],DATA24);
SIGNAL(TPC_TDC_T22,frstpc.data.v1190.measurement.data[21],DATA24);
SIGNAL(TPC_TDC_T23,frstpc.data.v1190.measurement.data[22],DATA24);
SIGNAL(TPC_TDC_T24,frstpc.data.v1190.measurement.data[23],DATA24);
SIGNAL(TPC_TDC_T25,frstpc.data.v1190.measurement.data[24],DATA24);
SIGNAL(TPC_TDC_T26,frstpc.data.v1190.measurement.data[25],DATA24);
SIGNAL(TPC_TDC_T27,frstpc.data.v1190.measurement.data[26],DATA24);
SIGNAL(TPC_TDC_T28,frstpc.data.v1190.measurement.data[27],DATA24);
SIGNAL(TPC_TDC_T29,frstpc.data.v1190.measurement.data[28],DATA24);
SIGNAL(TPC_TDC_T3,frstpc.data.v1190.measurement.data[2],DATA24);
SIGNAL(TPC_TDC_T30,frstpc.data.v1190.measurement.data[29],DATA24);
SIGNAL(TPC_TDC_T31,frstpc.data.v1190.measurement.data[30],DATA24);
SIGNAL(TPC_TDC_T32,frstpc.data.v1190.measurement.data[31],DATA24);
SIGNAL(TPC_TDC_T33,frstpc.data.v1190.measurement.data[32],DATA24);
SIGNAL(TPC_TDC_T34,frstpc.data.v1190.measurement.data[33],DATA24);
SIGNAL(TPC_TDC_T35,frstpc.data.v1190.measurement.data[34],DATA24);
SIGNAL(TPC_TDC_T36,frstpc.data.v1190.measurement.data[35],DATA24);
SIGNAL(TPC_TDC_T37,frstpc.data.v1190.measurement.data[36],DATA24);
SIGNAL(TPC_TDC_T38,frstpc.data.v1190.measurement.data[37],DATA24);
SIGNAL(TPC_TDC_T39,frstpc.data.v1190.measurement.data[38],DATA24);
SIGNAL(TPC_TDC_T4,frstpc.data.v1190.measurement.data[3],DATA24);
SIGNAL(TPC_TDC_T40,frstpc.data.v1190.measurement.data[39],DATA24);
SIGNAL(TPC_TDC_T41,frstpc.data.v1190.measurement.data[40],DATA24);
SIGNAL(TPC_TDC_T42,frstpc.data.v1190.measurement.data[41],DATA24);
SIGNAL(TPC_TDC_T43,frstpc.data.v1190.measurement.data[42],DATA24);
SIGNAL(TPC_TDC_T44,frstpc.data.v1190.measurement.data[43],DATA24);
SIGNAL(TPC_TDC_T45,frstpc.data.v1190.measurement.data[44],DATA24);
SIGNAL(TPC_TDC_T46,frstpc.data.v1190.measurement.data[45],DATA24);
SIGNAL(TPC_TDC_T47,frstpc.data.v1190.measurement.data[46],DATA24);
SIGNAL(TPC_TDC_T48,frstpc.data.v1190.measurement.data[47],DATA24);
SIGNAL(TPC_TDC_T49,frstpc.data.v1190.measurement.data[48],DATA24);
SIGNAL(TPC_TDC_T5,frstpc.data.v1190.measurement.data[4],DATA24);
SIGNAL(TPC_TDC_T50,frstpc.data.v1190.measurement.data[49],DATA24);
SIGNAL(TPC_TDC_T51,frstpc.data.v1190.measurement.data[50],DATA24);
SIGNAL(TPC_TDC_T52,frstpc.data.v1190.measurement.data[51],DATA24);
SIGNAL(TPC_TDC_T53,frstpc.data.v1190.measurement.data[52],DATA24);
SIGNAL(TPC_TDC_T54,frstpc.data.v1190.measurement.data[53],DATA24);
SIGNAL(TPC_TDC_T55,frstpc.data.v1190.measurement.data[54],DATA24);
SIGNAL(TPC_TDC_T56,frstpc.data.v1190.measurement.data[55],DATA24);
SIGNAL(TPC_TDC_T57,frstpc.data.v1190.measurement.data[56],DATA24);
SIGNAL(TPC_TDC_T58,frstpc.data.v1190.measurement.data[57],DATA24);
SIGNAL(TPC_TDC_T59,frstpc.data.v1190.measurement.data[58],DATA24);
SIGNAL(TPC_TDC_T6,frstpc.data.v1190.measurement.data[5],DATA24);
SIGNAL(TPC_TDC_T60,frstpc.data.v1190.measurement.data[59],DATA24);
SIGNAL(TPC_TDC_T61,frstpc.data.v1190.measurement.data[60],DATA24);
SIGNAL(TPC_TDC_T62,frstpc.data.v1190.measurement.data[61],DATA24);
SIGNAL(TPC_TDC_T63,frstpc.data.v1190.measurement.data[62],DATA24);
SIGNAL(TPC_TDC_T64,frstpc.data.v1190.measurement.data[63],DATA24);
SIGNAL(TPC_TDC_T65,frstpc.data.v1190.measurement.data[64],DATA24);
SIGNAL(TPC_TDC_T66,frstpc.data.v1190.measurement.data[65],DATA24);
SIGNAL(TPC_TDC_T67,frstpc.data.v1190.measurement.data[66],DATA24);
SIGNAL(TPC_TDC_T68,frstpc.data.v1190.measurement.data[67],DATA24);
SIGNAL(TPC_TDC_T69,frstpc.data.v1190.measurement.data[68],DATA24);
SIGNAL(TPC_TDC_T7,frstpc.data.v1190.measurement.data[6],DATA24);
SIGNAL(TPC_TDC_T70,frstpc.data.v1190.measurement.data[69],DATA24);
SIGNAL(TPC_TDC_T71,frstpc.data.v1190.measurement.data[70],DATA24);
SIGNAL(TPC_TDC_T72,frstpc.data.v1190.measurement.data[71],DATA24);
SIGNAL(TPC_TDC_T73,frstpc.data.v1190.measurement.data[72],DATA24);
SIGNAL(TPC_TDC_T74,frstpc.data.v1190.measurement.data[73],DATA24);
SIGNAL(TPC_TDC_T75,frstpc.data.v1190.measurement.data[74],DATA24);
SIGNAL(TPC_TDC_T76,frstpc.data.v1190.measurement.data[75],DATA24);
SIGNAL(TPC_TDC_T77,frstpc.data.v1190.measurement.data[76],DATA24);
SIGNAL(TPC_TDC_T78,frstpc.data.v1190.measurement.data[77],DATA24);
SIGNAL(TPC_TDC_T79,frstpc.data.v1190.measurement.data[78],DATA24);
SIGNAL(TPC_TDC_T8,frstpc.data.v1190.measurement.data[7],DATA24);
SIGNAL(TPC_TDC_T80,frstpc.data.v1190.measurement.data[79],DATA24);
SIGNAL(TPC_TDC_T81,frstpc.data.v1190.measurement.data[80],DATA24);
SIGNAL(TPC_TDC_T82,frstpc.data.v1190.measurement.data[81],DATA24);
SIGNAL(TPC_TDC_T83,frstpc.data.v1190.measurement.data[82],DATA24);
SIGNAL(TPC_TDC_T84,frstpc.data.v1190.measurement.data[83],DATA24);
SIGNAL(TPC_TDC_T85,frstpc.data.v1190.measurement.data[84],DATA24);
SIGNAL(TPC_TDC_T86,frstpc.data.v1190.measurement.data[85],DATA24);
SIGNAL(TPC_TDC_T87,frstpc.data.v1190.measurement.data[86],DATA24);
SIGNAL(TPC_TDC_T88,frstpc.data.v1190.measurement.data[87],DATA24);
SIGNAL(TPC_TDC_T89,frstpc.data.v1190.measurement.data[88],DATA24);
SIGNAL(TPC_TDC_T9,frstpc.data.v1190.measurement.data[8],DATA24);
SIGNAL(TPC_TDC_T90,frstpc.data.v1190.measurement.data[89],DATA24);
SIGNAL(TPC_TDC_T91,frstpc.data.v1190.measurement.data[90],DATA24);
SIGNAL(TPC_TDC_T92,frstpc.data.v1190.measurement.data[91],DATA24);
SIGNAL(TPC_TDC_T93,frstpc.data.v1190.measurement.data[92],DATA24);
SIGNAL(TPC_TDC_T94,frstpc.data.v1190.measurement.data[93],DATA24);
SIGNAL(TPC_TDC_T95,frstpc.data.v1190.measurement.data[94],DATA24);
SIGNAL(TPC_TDC_T96,frstpc.data.v1190.measurement.data[95],DATA24);
SIGNAL(TPC_TDC_T97,frstpc.data.v1190.measurement.data[96],DATA24);
SIGNAL(TPC_TDC_T98,frstpc.data.v1190.measurement.data[97],DATA24);
SIGNAL(TPC_TDC_T99,frstpc.data.v1190.measurement.data[98],DATA24);
SIGNAL(WR_ID,frstpat.wr.subsystem_id,DATA12);
SIGNAL(WR_T1,frstpat.wr.t1,DATA16);
SIGNAL(WR_T2,frstpat.wr.t2,DATA16);
SIGNAL(WR_T3,frstpat.wr.t3,DATA16);
SIGNAL(WR_T4,frstpat.wr.t4,DATA16);
SIGNAL( ZERO_SUPPRESS_MULTI(128):MUSIC1_LOT_8);
SIGNAL( ZERO_SUPPRESS_MULTI(128):MUSIC1_T_8);
SIGNAL( ZERO_SUPPRESS:MUSIC2_E_8);
SIGNAL( ZERO_SUPPRESS_MULTI(128):MUSIC2_LOT_8);
SIGNAL( ZERO_SUPPRESS_MULTI(128):MUSIC2_T_8);
SIGNAL( ZERO_SUPPRESS:SCALERS2_32);
SIGNAL( ZERO_SUPPRESS_MULTI(128):SCI_MHTDC_LOT_16);
SIGNAL( ZERO_SUPPRESS_MULTI(128):SCI_MHTDC_T_16);
SIGNAL( ZERO_SUPPRESS:SCI_TAC_DE_16);
SIGNAL( ZERO_SUPPRESS:SCI_TAC_DT_16);
SIGNAL( ZERO_SUPPRESS:TPC_ADC7_32);
SIGNAL( ZERO_SUPPRESS_MULTI(128):TPC_TDC_LOT_128);
SIGNAL( ZERO_SUPPRESS_MULTI(128):TPC_TDC_T_128);
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/
