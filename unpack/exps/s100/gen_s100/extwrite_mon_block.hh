//////////////////////////////////////////////////////////////////////
//
// This file is autogenerated by /u/profi/aali/s2Root/UCESB/hbook/make_external_struct_sender.pl
//
// Editing is useless.
//
//////////////////////////////////////////////////////////////////////

#ifndef __EXTERNAL_WRITER_EXTWRITE_MON_BLOCK__
#define __EXTERNAL_WRITER_EXTWRITE_MON_BLOCK__

#include "external_writer.hh"
#include <arpa/inet.h>
#include <stddef.h>
#include <assert.h>

// Wrapper functions for external ntuple/root/struct writing of
// the structure 'extwrite_mon_block'.

// uint32_t   events
// uint32_t   multi_events
// uint32_t   errors

void send_offsets_extwrite_mon_block(external_writer *ew)
{
  struct extwrite_mon_block dummy_s;

  ew->send_alloc_array(sizeof(extwrite_mon_block));

  ew->send_hbname_branch("DEF",offsetof(extwrite_mon_block,events),
                         sizeof(dummy_s.events),
                         "events",(uint) -1,"",
                         EXTERNAL_WRITER_FLAG_TYPE_UINT32);
  ew->send_hbname_branch("DEF",offsetof(extwrite_mon_block,multi_events),
                         sizeof(dummy_s.multi_events),
                         "multi_events",(uint) -1,"",
                         EXTERNAL_WRITER_FLAG_TYPE_UINT32);
  ew->send_hbname_branch("DEF",offsetof(extwrite_mon_block,errors),
                         sizeof(dummy_s.errors),
                         "errors",(uint) -1,"",
                         EXTERNAL_WRITER_FLAG_TYPE_UINT32);

  uint32_t offset_msg_size = (3 + 2 * 0) * (uint32_t) sizeof(uint32_t);
  uint32_t fill_msg_size = (1 + 3) * (uint32_t) sizeof(uint32_t);

  ew->set_max_message_size(fill_msg_size > offset_msg_size ?
                           fill_msg_size : offset_msg_size);

  {
    uint32_t *o = ew->prepare_send_offsets(offset_msg_size);

    *(o++) = htonl(EXTERNAL_WRITER_MARK_CANARY |
                   EXTERNAL_WRITER_MARK_CLEAR_ZERO);
    *(o++) = htonl((uint32_t) offsetof(extwrite_mon_block,events));
    *(o++) = htonl(EXTERNAL_WRITER_MARK_CANARY |
                   EXTERNAL_WRITER_MARK_CLEAR_ZERO);
    *(o++) = htonl((uint32_t) offsetof(extwrite_mon_block,multi_events));
    *(o++) = htonl(EXTERNAL_WRITER_MARK_CANARY |
                   EXTERNAL_WRITER_MARK_CLEAR_ZERO);
    *(o++) = htonl((uint32_t) offsetof(extwrite_mon_block,errors));

    ew->send_offsets_fill(o);
  }

  ew->send_setup_done();
}

//////////////////////////////////////////////////////////////////////

void send_fill_x_extwrite_mon_block(external_writer *ew,
                         const extwrite_mon_block &s,
                         uint32_t struct_index = 0,
                         uint32_t ntuple_index = 0)
{
  uint32_t fill_msg_size = (1 + 3) * (uint32_t) sizeof(uint32_t);

  uint32_t *p = ew->prepare_send_fill_x(fill_msg_size,
					struct_index,ntuple_index);

  *(p++) = htonl(EXTERNAL_WRITER_COMPACT_NONPACKED);

  *(p++) = htonl((s.events));
  *(p++) = htonl((s.multi_events));
  *(p++) = htonl((s.errors));

  ew->send_offsets_fill(p);
}

//////////////////////////////////////////////////////////////////////

#endif// __EXTERNAL_WRITER_EXTWRITE_MON_BLOCK__

